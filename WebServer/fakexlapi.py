#
# This is a generated file. 
# If there are content placeholders, only edit content inside content placeholders.
# If there are no content placeholders, do not edit this file directly.
#
import sys
import json
import enum
import datetime
import logging

# Begin_PlaceHolder_GlobalHeader
import runtime as OfficeExtension
# End_PlaceHolder_GlobalHeader

_createPropertyObjectPath = OfficeExtension.ObjectPathFactory.createPropertyObjectPath
_createMethodObjectPath = OfficeExtension.ObjectPathFactory.createMethodObjectPath
_createIndexerObjectPath = OfficeExtension.ObjectPathFactory.createIndexerObjectPath
_createNewObjectObjectPath = OfficeExtension.ObjectPathFactory.createNewObjectObjectPath
_createChildItemObjectPathUsingIndexer = OfficeExtension.ObjectPathFactory.createChildItemObjectPathUsingIndexer
_createChildItemObjectPathUsingGetItemAt = OfficeExtension.ObjectPathFactory.createChildItemObjectPathUsingGetItemAt
_createChildItemObjectPathUsingIndexerOrGetItemAt = OfficeExtension.ObjectPathFactory.createChildItemObjectPathUsingIndexerOrGetItemAt
_createMethodAction = OfficeExtension.ActionFactory.createMethodAction
_createSetPropertyAction = OfficeExtension.ActionFactory.createSetPropertyAction
_isNullOrUndefined = OfficeExtension.Utility.isNullOrUndefined
_isUndefined = OfficeExtension.Utility.isUndefined
_throwIfNotLoaded = OfficeExtension.Utility.throwIfNotLoaded
_loadIfInstantSyncExecutionMode = OfficeExtension.Utility.loadIfInstantSyncExecutionMode
_syncIfInstantSyncExecutionMode = OfficeExtension.Utility.syncIfInstantSyncExecutionMode
_load = OfficeExtension.Utility.load
_fixObjectPathIfNecessary = OfficeExtension.Utility.fixObjectPathIfNecessary
_addActionResultHandler = OfficeExtension.Utility._addActionResultHandler

class ChartType:
    none = "None"
    pie = "Pie"
    bar = "Bar"
    line = "Line"
    _3DBar = "3DBar"
    obsoleteChart = "ObsoleteChart"
    obsoleteChartWithoutComment = "ObsoleteChartWithoutComment"

class RangeValueType:
    unknown = "Unknown"
    empty = "Empty"
    string = "String"
    integer = "Integer"
    double = "Double"
    boolean = "Boolean"
    error = "Error"

class Application(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_Application_Custom_Members
    # End_PlaceHolder_Application_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._activeWorkbook = None
        self._hasBase = None
        self._testCaseObject = None
        self._testWorkbook = None

    @property
    def activeWorkbook(self) -> 'Workbook':
        if self._activeWorkbook is None:
            self._activeWorkbook = Workbook(self.context, _createPropertyObjectPath(self.context, self, "ActiveWorkbook", False, False))
        return self._activeWorkbook
    @property
    def testCaseObject(self) -> 'TestCaseObject':
        if self._testCaseObject is None:
            self._testCaseObject = TestCaseObject(self.context, _createPropertyObjectPath(self.context, self, "TestCaseObject", False, False))
        return self._testCaseObject
    @property
    def testWorkbook(self) -> 'TestWorkbook':
        if self._testWorkbook is None:
            self._testWorkbook = TestWorkbook(self.context, _createPropertyObjectPath(self.context, self, "TestWorkbook", False, False))
        return self._testWorkbook

    @property
    def hasBase(self) -> 'bool':
        _loadIfInstantSyncExecutionMode(self, "hasBase", self._hasBase)
        _throwIfNotLoaded("hasBase", self._hasBase, "Application", self._isNull)
        return self._hasBase
    

    def _GetObjectByReferenceId(self, referenceId : 'str') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Application__GetObjectByReferenceId
        # End_PlaceHolder_Application__GetObjectByReferenceId
        action = _createMethodAction(self.context, self, "_GetObjectByReferenceId", OfficeExtension.OperationType.Read, [referenceId])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def _GetObjectTypeNameByReferenceId(self, referenceId : 'str') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Application__GetObjectTypeNameByReferenceId
        # End_PlaceHolder_Application__GetObjectTypeNameByReferenceId
        action = _createMethodAction(self.context, self, "_GetObjectTypeNameByReferenceId", OfficeExtension.OperationType.Read, [referenceId])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def _RemoveReference(self, referenceId : 'str') -> None:
        # Begin_PlaceHolder_Application__RemoveReference
        # End_PlaceHolder_Application__RemoveReference
        _createMethodAction(self.context, self, "_RemoveReference", OfficeExtension.OperationType.Read, [referenceId])
        _syncIfInstantSyncExecutionMode(self)

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;
        if "HasBase" in obj:
            self._hasBase = obj.get("HasBase")
        if "ActiveWorkbook" in obj:
            self.activeWorkbook._handleResult(obj.get("ActiveWorkbook"))
        if "TestCaseObject" in obj:
            self.testCaseObject._handleResult(obj.get("TestCaseObject"))
        if "TestWorkbook" in obj:
            self.testWorkbook._handleResult(obj.get("TestWorkbook"))
    
    def load(self, option = None) -> 'Application':
        _load(self, option)
        return self
    
    def reload(self) -> 'Application':
        _load(self, None)
        return self

class Chart(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_Chart_Custom_Members
    # End_PlaceHolder_Chart_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._chartType = None
        self._id = None
        self._imageData = None
        self._name = None
        self._nullableChartType = None
        self._nullableShowLabel = None
        self._title = None


    @property
    def chartType(self) -> 'str':
        _loadIfInstantSyncExecutionMode(self, "chartType", self._chartType)
        _throwIfNotLoaded("chartType", self._chartType, "Chart", self._isNull)
        return self._chartType
    

    @chartType.setter
    def chartType(self, value : 'str'):
        self._chartType = value
        _createSetPropertyAction(self.context, self, "ChartType", value)
        _syncIfInstantSyncExecutionMode(self)

    @property
    def id(self) -> 'int':
        _loadIfInstantSyncExecutionMode(self, "id", self._id)
        _throwIfNotLoaded("id", self._id, "Chart", self._isNull)
        return self._id
    

    @property
    def imageData(self) -> 'str':
        _loadIfInstantSyncExecutionMode(self, "imageData", self._imageData)
        _throwIfNotLoaded("imageData", self._imageData, "Chart", self._isNull)
        return self._imageData
    

    @property
    def name(self) -> 'str':
        _loadIfInstantSyncExecutionMode(self, "name", self._name)
        _throwIfNotLoaded("name", self._name, "Chart", self._isNull)
        return self._name
    

    @property
    def nullableChartType(self) -> 'str':
        _loadIfInstantSyncExecutionMode(self, "nullableChartType", self._nullableChartType)
        _throwIfNotLoaded("nullableChartType", self._nullableChartType, "Chart", self._isNull)
        return self._nullableChartType
    

    @nullableChartType.setter
    def nullableChartType(self, value : 'str'):
        self._nullableChartType = value
        _createSetPropertyAction(self.context, self, "NullableChartType", value)
        _syncIfInstantSyncExecutionMode(self)

    @property
    def nullableShowLabel(self) -> 'bool':
        _loadIfInstantSyncExecutionMode(self, "nullableShowLabel", self._nullableShowLabel)
        _throwIfNotLoaded("nullableShowLabel", self._nullableShowLabel, "Chart", self._isNull)
        return self._nullableShowLabel
    

    @nullableShowLabel.setter
    def nullableShowLabel(self, value : 'bool'):
        self._nullableShowLabel = value
        _createSetPropertyAction(self.context, self, "NullableShowLabel", value)
        _syncIfInstantSyncExecutionMode(self)

    @property
    def title(self) -> 'str':
        _loadIfInstantSyncExecutionMode(self, "title", self._title)
        _throwIfNotLoaded("title", self._title, "Chart", self._isNull)
        return self._title
    

    @title.setter
    def title(self, value : 'str'):
        self._title = value
        _createSetPropertyAction(self.context, self, "Title", value)
        _syncIfInstantSyncExecutionMode(self)

    def delete(self) -> None:
        # Begin_PlaceHolder_Chart_Delete
        # End_PlaceHolder_Chart_Delete
        _createMethodAction(self.context, self, "Delete", OfficeExtension.OperationType.Default, [])
        _syncIfInstantSyncExecutionMode(self)

    def getAsImage(self, large : 'bool') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Chart_GetAsImage
        # End_PlaceHolder_Chart_GetAsImage
        action = _createMethodAction(self.context, self, "GetAsImage", OfficeExtension.OperationType.Read, [large])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;
        if "ChartType" in obj:
            self._chartType = obj.get("ChartType")
        if "Id" in obj:
            self._id = obj.get("Id")
        if "ImageData" in obj:
            self._imageData = obj.get("ImageData")
        if "Name" in obj:
            self._name = obj.get("Name")
        if "NullableChartType" in obj:
            self._nullableChartType = obj.get("NullableChartType")
        if "NullableShowLabel" in obj:
            self._nullableShowLabel = obj.get("NullableShowLabel")
        if "Title" in obj:
            self._title = obj.get("Title")
    
    def load(self, option = None) -> 'Chart':
        _load(self, option)
        return self
    
    def reload(self) -> 'Chart':
        _load(self, None)
        return self
    def _handleIdResult(self, value) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if value is None:
            return
        if "Id" in value:
            self._id = value.get("Id")
    
    def __str__(self) -> str:
        _loadIfInstantSyncExecutionMode(self, "Name", self._name)
        return self._name

class ChartCollection(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_ChartCollection_Custom_Members
    # End_PlaceHolder_ChartCollection_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._count = None
        self.__items = None

    
    @property
    def items(self) -> 'list of Chart':
        _loadIfInstantSyncExecutionMode(self, "items", self.__items)
        _throwIfNotLoaded("items", self.__items, "ChartCollection", self._isNull)
        return self.__items
    

    @property
    def count(self) -> 'int':
        _loadIfInstantSyncExecutionMode(self, "count", self._count)
        _throwIfNotLoaded("count", self._count, "ChartCollection", self._isNull)
        return self._count
    

    def add(self, name : 'str', chartType : 'str') -> 'Chart':
        # Begin_PlaceHolder_ChartCollection_Add
        # End_PlaceHolder_ChartCollection_Add
        ret = Chart(self.context, _createMethodObjectPath(self.context, self, "Add", OfficeExtension.OperationType.Default, [name, chartType], False, True))
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def getItem(self, index : 'any') -> 'Chart':
        # Begin_PlaceHolder_ChartCollection_GetItem
        # End_PlaceHolder_ChartCollection_GetItem
        return Chart(self.context, _createIndexerObjectPath(self.context, self, [index]))

    def getItemAt(self, ordinal : 'int') -> 'Chart':
        # Begin_PlaceHolder_ChartCollection_GetItemAt
        # End_PlaceHolder_ChartCollection_GetItemAt
        ret = Chart(self.context, _createMethodObjectPath(self.context, self, "GetItemAt", OfficeExtension.OperationType.Read, [ordinal], False, False))
        return ret

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;
        if "Count" in obj:
            self._count = obj.get("Count")
        if OfficeExtension.Constants.items in obj:
            self.__items = []
            data = obj.get(OfficeExtension.Constants.items)
            for i, itemData in enumerate(data):
                item = Chart(self.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(True, self.context, self, itemData, i))
                item._handleResult(itemData)
                self.__items.append(item)
    
    def load(self, option = None) -> 'ChartCollection':
        _load(self, option)
        return self
    
    def reload(self) -> 'ChartCollection':
        _load(self, None)
        return self

class ErrorMethodType:
    none = "None"
    accessDenied = "AccessDenied"
    stateChanged = "StateChanged"
    bounds = "Bounds"
    abort = "Abort"

class TestWorkbook(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_TestWorkbook_Custom_Members
    # End_PlaceHolder_TestWorkbook_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._created = None
        self._errorWorksheet = None
        self._errorWorksheet2 = None
        self._nullableCreated = None
        self._sectionGroups = None
        self._sections = None

    @property
    def errorWorksheet(self) -> 'Worksheet':
        if self._errorWorksheet is None:
            self._errorWorksheet = Worksheet(self.context, _createPropertyObjectPath(self.context, self, "ErrorWorksheet", False, False))
        return self._errorWorksheet
    @property
    def errorWorksheet2(self) -> 'Worksheet':
        if self._errorWorksheet2 is None:
            self._errorWorksheet2 = Worksheet(self.context, _createPropertyObjectPath(self.context, self, "ErrorWorksheet2", False, False))
        return self._errorWorksheet2
    @property
    def sectionGroups(self) -> 'SectionGroupCollection':
        if self._sectionGroups is None:
            self._sectionGroups = SectionGroupCollection(self.context, _createPropertyObjectPath(self.context, self, "SectionGroups", True, False))
        return self._sectionGroups
    @property
    def sections(self) -> 'SectionCollection':
        if self._sections is None:
            self._sections = SectionCollection(self.context, _createPropertyObjectPath(self.context, self, "Sections", True, False))
        return self._sections

    @property
    def created(self) -> 'datetime.datetime':
        _loadIfInstantSyncExecutionMode(self, "created", self._created)
        _throwIfNotLoaded("created", self._created, "TestWorkbook", self._isNull)
        return self._created
    

    @created.setter
    def created(self, value : 'datetime.datetime'):
        self._created = value
        _createSetPropertyAction(self.context, self, "Created", value)
        _syncIfInstantSyncExecutionMode(self)

    @property
    def nullableCreated(self) -> 'datetime.datetime':
        _loadIfInstantSyncExecutionMode(self, "nullableCreated", self._nullableCreated)
        _throwIfNotLoaded("nullableCreated", self._nullableCreated, "TestWorkbook", self._isNull)
        return self._nullableCreated
    

    @nullableCreated.setter
    def nullableCreated(self, value : 'datetime.datetime'):
        self._nullableCreated = value
        _createSetPropertyAction(self.context, self, "NullableCreated", value)
        _syncIfInstantSyncExecutionMode(self)

    def errorMethod(self, input : 'str') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestWorkbook_ErrorMethod
        # End_PlaceHolder_TestWorkbook_ErrorMethod
        action = _createMethodAction(self.context, self, "ErrorMethod", OfficeExtension.OperationType.Default, [input])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def errorMethod2(self, input : 'str') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestWorkbook_ErrorMethod2
        # End_PlaceHolder_TestWorkbook_ErrorMethod2
        action = _createMethodAction(self.context, self, "ErrorMethod2", OfficeExtension.OperationType.Default, [input])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def getActiveWorksheet(self) -> 'Worksheet':
        # Begin_PlaceHolder_TestWorkbook_GetActiveWorksheet
        # End_PlaceHolder_TestWorkbook_GetActiveWorksheet
        ret = Worksheet(self.context, _createMethodObjectPath(self.context, self, "GetActiveWorksheet", OfficeExtension.OperationType.Read, [], False, False))
        return ret

    def getCachedObjectCount(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestWorkbook_GetCachedObjectCount
        # End_PlaceHolder_TestWorkbook_GetCachedObjectCount
        action = _createMethodAction(self.context, self, "GetCachedObjectCount", OfficeExtension.OperationType.Default, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def getNullableBoolValue(self, nullable : 'bool') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestWorkbook_GetNullableBoolValue
        # End_PlaceHolder_TestWorkbook_GetNullableBoolValue
        action = _createMethodAction(self.context, self, "GetNullableBoolValue", OfficeExtension.OperationType.Default, [nullable])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def getNullableEnumValue(self, nullable : 'bool') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestWorkbook_GetNullableEnumValue
        # End_PlaceHolder_TestWorkbook_GetNullableEnumValue
        action = _createMethodAction(self.context, self, "GetNullableEnumValue", OfficeExtension.OperationType.Default, [nullable])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def getObjectCount(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestWorkbook_GetObjectCount
        # End_PlaceHolder_TestWorkbook_GetObjectCount
        action = _createMethodAction(self.context, self, "GetObjectCount", OfficeExtension.OperationType.Default, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def getScopedSections(self, ns : 'str') -> 'SectionCollection':
        # Begin_PlaceHolder_TestWorkbook_GetScopedSections
        # End_PlaceHolder_TestWorkbook_GetScopedSections
        ret = SectionCollection(self.context, _createMethodObjectPath(self.context, self, "GetScopedSections", OfficeExtension.OperationType.Read, [ns], True, False))
        return ret

    def testNullableInputValue(self, chartType : 'str', boolValue : 'bool') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestWorkbook_TestNullableInputValue
        # End_PlaceHolder_TestWorkbook_TestNullableInputValue
        action = _createMethodAction(self.context, self, "TestNullableInputValue", OfficeExtension.OperationType.Default, [chartType, boolValue])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def testParamNameValueDict(self, value : 'any') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestWorkbook_TestParamNameValueDict
        # End_PlaceHolder_TestWorkbook_TestParamNameValueDict
        action = _createMethodAction(self.context, self, "TestParamNameValueDict", OfficeExtension.OperationType.Default, [value])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def testParamObject(self, value : 'any') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestWorkbook_TestParamObject
        # End_PlaceHolder_TestWorkbook_TestParamObject
        action = _createMethodAction(self.context, self, "TestParamObject", OfficeExtension.OperationType.Default, [value])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;
        if "Created" in obj:
            self._created = _adjustToDateTime(obj.get("Created"))
        if "NullableCreated" in obj:
            self._nullableCreated = _adjustToDateTime(obj.get("NullableCreated"))
        if "ErrorWorksheet" in obj:
            self.errorWorksheet._handleResult(obj.get("ErrorWorksheet"))
        if "ErrorWorksheet2" in obj:
            self.errorWorksheet2._handleResult(obj.get("ErrorWorksheet2"))
        if "SectionGroups" in obj:
            self.sectionGroups._handleResult(obj.get("SectionGroups"))
        if "Sections" in obj:
            self.sections._handleResult(obj.get("Sections"))
    
    def load(self, option = None) -> 'TestWorkbook':
        _load(self, option)
        return self
    
    def reload(self) -> 'TestWorkbook':
        _load(self, None)
        return self

class Workbook(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_Workbook_Custom_Members
    # End_PlaceHolder_Workbook_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._activeWorksheet = None
        self._charts = None
        self._sheets = None

    @property
    def activeWorksheet(self) -> 'Worksheet':
        if self._activeWorksheet is None:
            self._activeWorksheet = Worksheet(self.context, _createPropertyObjectPath(self.context, self, "ActiveWorksheet", False, False))
        return self._activeWorksheet
    @property
    def charts(self) -> 'ChartCollection':
        if self._charts is None:
            self._charts = ChartCollection(self.context, _createPropertyObjectPath(self.context, self, "Charts", True, False))
        return self._charts
    @property
    def sheets(self) -> 'WorksheetCollection':
        if self._sheets is None:
            self._sheets = WorksheetCollection(self.context, _createPropertyObjectPath(self.context, self, "Sheets", True, False))
        return self._sheets

    def addChart(self, name : 'str', chartType : 'str') -> 'Chart':
        # Begin_PlaceHolder_Workbook_AddChart
        # End_PlaceHolder_Workbook_AddChart
        ret = Chart(self.context, _createMethodObjectPath(self.context, self, "AddChart", OfficeExtension.OperationType.Default, [name, chartType], False, True))
        return ret

    def getChartByType(self, chartType : 'str') -> 'Chart':
        # Begin_PlaceHolder_Workbook_GetChartByType
        # End_PlaceHolder_Workbook_GetChartByType
        ret = Chart(self.context, _createMethodObjectPath(self.context, self, "GetChartByType", OfficeExtension.OperationType.Read, [chartType], False, False))
        return ret

    def getChartByTypeTitle(self, chartType : 'str', title : 'str') -> 'Chart':
        # Begin_PlaceHolder_Workbook_GetChartByTypeTitle
        # End_PlaceHolder_Workbook_GetChartByTypeTitle
        ret = Chart(self.context, _createMethodObjectPath(self.context, self, "GetChartByTypeTitle", OfficeExtension.OperationType.Read, [chartType, title], False, False))
        return ret

    def someAction(self, intVal : 'int', strVal : 'str', enumVal : 'str') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Workbook_SomeAction
        # End_PlaceHolder_Workbook_SomeAction
        action = _createMethodAction(self.context, self, "SomeAction", OfficeExtension.OperationType.Default, [intVal, strVal, enumVal])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def _GetChartById(self, id : 'int') -> 'Chart':
        # Begin_PlaceHolder_Workbook__GetChartById
        # End_PlaceHolder_Workbook__GetChartById
        ret = Chart(self.context, _createMethodObjectPath(self.context, self, "_GetChartById", OfficeExtension.OperationType.Read, [id], False, False))
        return ret

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;
        if "ActiveWorksheet" in obj:
            self.activeWorksheet._handleResult(obj.get("ActiveWorksheet"))
        if "Charts" in obj:
            self.charts._handleResult(obj.get("Charts"))
        if "Sheets" in obj:
            self.sheets._handleResult(obj.get("Sheets"))
    
    def load(self, option = None) -> 'Workbook':
        _load(self, option)
        return self
    
    def reload(self) -> 'Workbook':
        _load(self, None)
        return self

class Worksheet(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_Worksheet_Custom_Members
    # End_PlaceHolder_Worksheet_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._calculatedName = None
        self._errorRangeProp = None
        self._name = None
        self._rangeProp = None
        self._rangePropOrNull = None
        self._ranges = None
        self._rows = None
        self.__Id = None

    @property
    def errorRangeProp(self) -> 'ErrorRange':
        if self._errorRangeProp is None:
            self._errorRangeProp = ErrorRange(self.context, _createPropertyObjectPath(self.context, self, "ErrorRangeProp", False, False))
        return self._errorRangeProp
    @property
    def rangeProp(self) -> 'Range':
        if self._rangeProp is None:
            self._rangeProp = Range(self.context, _createPropertyObjectPath(self.context, self, "RangeProp", False, False))
        return self._rangeProp
    @property
    def rangePropOrNull(self) -> 'Range':
        if self._rangePropOrNull is None:
            self._rangePropOrNull = Range(self.context, _createPropertyObjectPath(self.context, self, "RangePropOrNull", False, False))
        return self._rangePropOrNull
    @property
    def ranges(self) -> 'RangeCollection':
        if self._ranges is None:
            self._ranges = RangeCollection(self.context, _createPropertyObjectPath(self.context, self, "Ranges", True, False))
        return self._ranges
    @property
    def rows(self) -> 'RowCollection':
        if self._rows is None:
            self._rows = RowCollection(self.context, _createPropertyObjectPath(self.context, self, "Rows", True, False))
        return self._rows

    @property
    def calculatedName(self) -> 'str':
        _loadIfInstantSyncExecutionMode(self, "calculatedName", self._calculatedName)
        _throwIfNotLoaded("calculatedName", self._calculatedName, "Worksheet", self._isNull)
        return self._calculatedName
    

    @calculatedName.setter
    def calculatedName(self, value : 'str'):
        self._calculatedName = value
        _createSetPropertyAction(self.context, self, "CalculatedName", value)
        _syncIfInstantSyncExecutionMode(self)

    @property
    def name(self) -> 'str':
        _loadIfInstantSyncExecutionMode(self, "name", self._name)
        _throwIfNotLoaded("name", self._name, "Worksheet", self._isNull)
        return self._name
    

    @property
    def _Id(self) -> 'int':
        _loadIfInstantSyncExecutionMode(self, "_Id", self.__Id)
        _throwIfNotLoaded("_Id", self.__Id, "Worksheet", self._isNull)
        return self.__Id
    

    def getActiveCell(self) -> 'Range':
        # Begin_PlaceHolder_Worksheet_GetActiveCell
        # End_PlaceHolder_Worksheet_GetActiveCell
        ret = Range(self.context, _createMethodObjectPath(self.context, self, "GetActiveCell", OfficeExtension.OperationType.Read, [], False, False))
        return ret

    def getActiveCellInvalidAfterRequest(self) -> 'Range':
        # Begin_PlaceHolder_Worksheet_GetActiveCellInvalidAfterRequest
        # End_PlaceHolder_Worksheet_GetActiveCellInvalidAfterRequest
        ret = Range(self.context, _createMethodObjectPath(self.context, self, "GetActiveCellInvalidAfterRequest", OfficeExtension.OperationType.Read, [], False, True))
        return ret

    def getErrorRangeMethod(self) -> 'ErrorRange':
        # Begin_PlaceHolder_Worksheet_GetErrorRangeMethod
        # End_PlaceHolder_Worksheet_GetErrorRangeMethod
        ret = ErrorRange(self.context, _createMethodObjectPath(self.context, self, "GetErrorRangeMethod", OfficeExtension.OperationType.Read, [], False, False))
        return ret

    def nullChart(self, address : 'str') -> 'Chart':
        # Begin_PlaceHolder_Worksheet_NullChart
        # End_PlaceHolder_Worksheet_NullChart
        ret = Chart(self.context, _createMethodObjectPath(self.context, self, "NullChart", OfficeExtension.OperationType.Read, [address], False, False))
        return ret

    def nullRange(self, address : 'str') -> 'Range':
        # Begin_PlaceHolder_Worksheet_NullRange
        # End_PlaceHolder_Worksheet_NullRange
        ret = Range(self.context, _createMethodObjectPath(self.context, self, "NullRange", OfficeExtension.OperationType.Read, [address], False, False))
        return ret

    def range(self, address : 'str') -> 'Range':
        # Begin_PlaceHolder_Worksheet_Range
        # End_PlaceHolder_Worksheet_Range
        ret = Range(self.context, _createMethodObjectPath(self.context, self, "Range", OfficeExtension.OperationType.Read, [address], False, True))
        return ret

    def someRangeOperation(self, input : 'str', range : 'Range') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Worksheet_SomeRangeOperation
        # End_PlaceHolder_Worksheet_SomeRangeOperation
        action = _createMethodAction(self.context, self, "SomeRangeOperation", OfficeExtension.OperationType.Default, [input, range])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def specOnlyMethod(self, input : 'str') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Worksheet_SpecOnlyMethod
        # End_PlaceHolder_Worksheet_SpecOnlyMethod
        action = _createMethodAction(self.context, self, "SpecOnlyMethod", OfficeExtension.OperationType.Default, [input])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def _RestOnly(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Worksheet__RestOnly
        # End_PlaceHolder_Worksheet__RestOnly
        action = _createMethodAction(self.context, self, "_RestOnly", OfficeExtension.OperationType.Read, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;
        if "CalculatedName" in obj:
            self._calculatedName = obj.get("CalculatedName")
        if "Name" in obj:
            self._name = obj.get("Name")
        if "_Id" in obj:
            self.__Id = obj.get("_Id")
        if "ErrorRangeProp" in obj:
            self.errorRangeProp._handleResult(obj.get("ErrorRangeProp"))
        if "RangeProp" in obj:
            self.rangeProp._handleResult(obj.get("RangeProp"))
        if "RangePropOrNull" in obj:
            self.rangePropOrNull._handleResult(obj.get("RangePropOrNull"))
        if "Ranges" in obj:
            self.ranges._handleResult(obj.get("Ranges"))
        if "Rows" in obj:
            self.rows._handleResult(obj.get("Rows"))
    
    def load(self, option = None) -> 'Worksheet':
        _load(self, option)
        return self
    
    def reload(self) -> 'Worksheet':
        _load(self, None)
        return self
    def _handleIdResult(self, value) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if value is None:
            return
        if "_Id" in value:
            self.__Id = value.get("_Id")
    
    def __str__(self) -> str:
        _loadIfInstantSyncExecutionMode(self, "Name", self._name)
        return self._name

class WorksheetCollection(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_WorksheetCollection_Custom_Members
    # End_PlaceHolder_WorksheetCollection_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self.__items = None

    
    @property
    def items(self) -> 'list of Worksheet':
        _loadIfInstantSyncExecutionMode(self, "items", self.__items)
        _throwIfNotLoaded("items", self.__items, "WorksheetCollection", self._isNull)
        return self.__items
    

    def add(self, name : 'str') -> 'Worksheet':
        # Begin_PlaceHolder_WorksheetCollection_Add
        # End_PlaceHolder_WorksheetCollection_Add
        ret = Worksheet(self.context, _createMethodObjectPath(self.context, self, "Add", OfficeExtension.OperationType.Default, [name], False, True))
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def findSheet(self, text : 'str') -> 'Worksheet':
        # Begin_PlaceHolder_WorksheetCollection_FindSheet
        # End_PlaceHolder_WorksheetCollection_FindSheet
        ret = Worksheet(self.context, _createMethodObjectPath(self.context, self, "FindSheet", OfficeExtension.OperationType.Read, [text], False, False))
        return ret

    def getActiveWorksheetInvalidAfterRequest(self) -> 'Worksheet':
        # Begin_PlaceHolder_WorksheetCollection_GetActiveWorksheetInvalidAfterRequest
        # End_PlaceHolder_WorksheetCollection_GetActiveWorksheetInvalidAfterRequest
        ret = Worksheet(self.context, _createMethodObjectPath(self.context, self, "GetActiveWorksheetInvalidAfterRequest", OfficeExtension.OperationType.Read, [], False, True))
        return ret

    def getItem(self, index : 'any') -> 'Worksheet':
        # Begin_PlaceHolder_WorksheetCollection_GetItem
        # End_PlaceHolder_WorksheetCollection_GetItem
        ret = Worksheet(self.context, _createMethodObjectPath(self.context, self, "GetItem", OfficeExtension.OperationType.Default, [index], False, False))
        return ret

    def _GetItem(self, index : 'any') -> 'Worksheet':
        # Begin_PlaceHolder_WorksheetCollection__GetItem
        # End_PlaceHolder_WorksheetCollection__GetItem
        return Worksheet(self.context, _createIndexerObjectPath(self.context, self, [index]))

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;
        if OfficeExtension.Constants.items in obj:
            self.__items = []
            data = obj.get(OfficeExtension.Constants.items)
            for i, itemData in enumerate(data):
                item = Worksheet(self.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(True, self.context, self, itemData, i))
                item._handleResult(itemData)
                self.__items.append(item)
    
    def load(self, option = None) -> 'WorksheetCollection':
        _load(self, option)
        return self
    
    def reload(self) -> 'WorksheetCollection':
        _load(self, None)
        return self

class Range(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_Range_Custom_Members
    # End_PlaceHolder_Range_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._columnIndex = None
        self._logText = None
        self._rowIndex = None
        self._sort = None
        self._text = None
        self._textArray = None
        self._value = None
        self._valueArray = None
        self._valueArray2 = None
        self._valueTypes = None
        self.__ReferenceId = None

    @property
    def sort(self) -> 'RangeSort':
        if self._sort is None:
            self._sort = RangeSort(self.context, _createPropertyObjectPath(self.context, self, "Sort", False, False))
        return self._sort

    @property
    def columnIndex(self) -> 'int':
        _loadIfInstantSyncExecutionMode(self, "columnIndex", self._columnIndex)
        _throwIfNotLoaded("columnIndex", self._columnIndex, "Range", self._isNull)
        return self._columnIndex
    

    @property
    def logText(self) -> 'str':
        _loadIfInstantSyncExecutionMode(self, "logText", self._logText)
        _throwIfNotLoaded("logText", self._logText, "Range", self._isNull)
        return self._logText
    

    @property
    def rowIndex(self) -> 'int':
        _loadIfInstantSyncExecutionMode(self, "rowIndex", self._rowIndex)
        _throwIfNotLoaded("rowIndex", self._rowIndex, "Range", self._isNull)
        return self._rowIndex
    

    @property
    def text(self) -> 'str':
        _loadIfInstantSyncExecutionMode(self, "text", self._text)
        _throwIfNotLoaded("text", self._text, "Range", self._isNull)
        return self._text
    

    @text.setter
    def text(self, value : 'str'):
        self._text = value
        _createSetPropertyAction(self.context, self, "Text", value)
        _syncIfInstantSyncExecutionMode(self)

    @property
    def textArray(self) -> 'list':
        _loadIfInstantSyncExecutionMode(self, "textArray", self._textArray)
        _throwIfNotLoaded("textArray", self._textArray, "Range", self._isNull)
        return self._textArray
    

    @textArray.setter
    def textArray(self, value : 'list'):
        self._textArray = value
        _createSetPropertyAction(self.context, self, "TextArray", value)
        _syncIfInstantSyncExecutionMode(self)

    @property
    def value(self) -> 'any':
        _loadIfInstantSyncExecutionMode(self, "value", self._value)
        _throwIfNotLoaded("value", self._value, "Range", self._isNull)
        return self._value
    

    @value.setter
    def value(self, value : 'any'):
        self._value = value
        _createSetPropertyAction(self.context, self, "Value", value)
        _syncIfInstantSyncExecutionMode(self)

    @property
    def valueArray(self) -> 'list':
        _loadIfInstantSyncExecutionMode(self, "valueArray", self._valueArray)
        _throwIfNotLoaded("valueArray", self._valueArray, "Range", self._isNull)
        return self._valueArray
    

    @valueArray.setter
    def valueArray(self, value : 'list'):
        self._valueArray = value
        _createSetPropertyAction(self.context, self, "ValueArray", value)
        _syncIfInstantSyncExecutionMode(self)

    @property
    def valueArray2(self) -> 'any':
        _loadIfInstantSyncExecutionMode(self, "valueArray2", self._valueArray2)
        _throwIfNotLoaded("valueArray2", self._valueArray2, "Range", self._isNull)
        return self._valueArray2
    

    @valueArray2.setter
    def valueArray2(self, value : 'any'):
        self._valueArray2 = value
        _createSetPropertyAction(self.context, self, "ValueArray2", value)
        _syncIfInstantSyncExecutionMode(self)

    @property
    def valueTypes(self) -> 'list':
        _loadIfInstantSyncExecutionMode(self, "valueTypes", self._valueTypes)
        _throwIfNotLoaded("valueTypes", self._valueTypes, "Range", self._isNull)
        return self._valueTypes
    

    @property
    def _ReferenceId(self) -> 'str':
        _loadIfInstantSyncExecutionMode(self, "_ReferenceId", self.__ReferenceId)
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId, "Range", self._isNull)
        return self.__ReferenceId
    

    def activate(self) -> None:
        # Begin_PlaceHolder_Range_Activate
        # End_PlaceHolder_Range_Activate
        _createMethodAction(self.context, self, "Activate", OfficeExtension.OperationType.Default, [])
        _syncIfInstantSyncExecutionMode(self)

    def getValueArray2(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Range_GetValueArray2
        # End_PlaceHolder_Range_GetValueArray2
        action = _createMethodAction(self.context, self, "GetValueArray2", OfficeExtension.OperationType.Default, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def notRestMethod(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Range_NotRestMethod
        # End_PlaceHolder_Range_NotRestMethod
        action = _createMethodAction(self.context, self, "NotRestMethod", OfficeExtension.OperationType.Read, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def replaceValue(self, newValue : 'any') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Range_ReplaceValue
        # End_PlaceHolder_Range_ReplaceValue
        action = _createMethodAction(self.context, self, "ReplaceValue", OfficeExtension.OperationType.Default, [newValue])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def setValueArray2(self, valueArray : 'any', text : 'str') -> None:
        # Begin_PlaceHolder_Range_SetValueArray2
        # End_PlaceHolder_Range_SetValueArray2
        _createMethodAction(self.context, self, "SetValueArray2", OfficeExtension.OperationType.Default, [valueArray, text])
        _syncIfInstantSyncExecutionMode(self)

    def _KeepReference(self) -> None:
        # Begin_PlaceHolder_Range__KeepReference
        # End_PlaceHolder_Range__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])
        _syncIfInstantSyncExecutionMode(self)

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;
        if "ColumnIndex" in obj:
            self._columnIndex = obj.get("ColumnIndex")
        if "LogText" in obj:
            self._logText = obj.get("LogText")
        if "RowIndex" in obj:
            self._rowIndex = obj.get("RowIndex")
        if "Text" in obj:
            self._text = obj.get("Text")
        if "TextArray" in obj:
            self._textArray = obj.get("TextArray")
        if "Value" in obj:
            self._value = obj.get("Value")
        if "ValueArray" in obj:
            self._valueArray = obj.get("ValueArray")
        if "ValueArray2" in obj:
            self._valueArray2 = obj.get("ValueArray2")
        if "ValueTypes" in obj:
            self._valueTypes = obj.get("ValueTypes")
        if "_ReferenceId" in obj:
            self.__ReferenceId = obj.get("_ReferenceId")
        if "Sort" in obj:
            self.sort._handleResult(obj.get("Sort"))
    
    def load(self, option = None) -> 'Range':
        _load(self, option)
        return self
    
    def reload(self) -> 'Range':
        _load(self, None)
        return self
    def _handleIdResult(self, value) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if value is None:
            return
        if "_ReferenceId" in value:
            self.__ReferenceId = value.get("_ReferenceId")

class RangeCollection(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_RangeCollection_Custom_Members
    # End_PlaceHolder_RangeCollection_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self.__items = None

    
    @property
    def items(self) -> 'list of Range':
        _loadIfInstantSyncExecutionMode(self, "items", self.__items)
        _throwIfNotLoaded("items", self.__items, "RangeCollection", self._isNull)
        return self.__items
    

    def getCount(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_RangeCollection_GetCount
        # End_PlaceHolder_RangeCollection_GetCount
        action = _createMethodAction(self.context, self, "GetCount", OfficeExtension.OperationType.Read, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def getItemAt(self, index : 'int') -> 'Range':
        # Begin_PlaceHolder_RangeCollection_GetItemAt
        # End_PlaceHolder_RangeCollection_GetItemAt
        ret = Range(self.context, _createMethodObjectPath(self.context, self, "GetItemAt", OfficeExtension.OperationType.Default, [index], False, False))
        return ret

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;
        if OfficeExtension.Constants.items in obj:
            self.__items = []
            data = obj.get(OfficeExtension.Constants.items)
            for i, itemData in enumerate(data):
                item = Range(self.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(False, self.context, self, itemData, i))
                item._handleResult(itemData)
                self.__items.append(item)
    
    def load(self, option = None) -> 'RangeCollection':
        _load(self, option)
        return self
    
    def reload(self) -> 'RangeCollection':
        _load(self, None)
        return self

class ErrorRange(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_ErrorRange_Custom_Members
    # End_PlaceHolder_ErrorRange_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._errorProp = None


    @property
    def errorProp(self) -> 'int':
        _loadIfInstantSyncExecutionMode(self, "errorProp", self._errorProp)
        _throwIfNotLoaded("errorProp", self._errorProp, "ErrorRange", self._isNull)
        return self._errorProp
    

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;
        if "ErrorProp" in obj:
            self._errorProp = obj.get("ErrorProp")
    
    def load(self, option = None) -> 'ErrorRange':
        _load(self, option)
        return self
    
    def reload(self) -> 'ErrorRange':
        _load(self, None)
        return self

class TestCaseObject(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_TestCaseObject_Custom_Members
    # End_PlaceHolder_TestCaseObject_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)


    def calculateAddressAndSaveToRange(self, street : 'str', city : 'str', range : 'Range') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_CalculateAddressAndSaveToRange
        # End_PlaceHolder_TestCaseObject_CalculateAddressAndSaveToRange
        action = _createMethodAction(self.context, self, "CalculateAddressAndSaveToRange", OfficeExtension.OperationType.Default, [street, city, range])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def getNullableDateTimeValue(self, nullable : 'bool') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_GetNullableDateTimeValue
        # End_PlaceHolder_TestCaseObject_GetNullableDateTimeValue
        action = _createMethodAction(self.context, self, "GetNullableDateTimeValue", OfficeExtension.OperationType.Default, [nullable])
        ret = OfficeExtension.ClientResult(OfficeExtension.ClientResultProcessingType.date)
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def matrixSum(self, matrix : 'list') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_MatrixSum
        # End_PlaceHolder_TestCaseObject_MatrixSum
        action = _createMethodAction(self.context, self, "MatrixSum", OfficeExtension.OperationType.Default, [matrix])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def sum(self, values : 'list') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_Sum
        # End_PlaceHolder_TestCaseObject_Sum
        action = _createMethodAction(self.context, self, "Sum", OfficeExtension.OperationType.Default, [values])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def test2DArray(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_Test2DArray
        # End_PlaceHolder_TestCaseObject_Test2DArray
        action = _createMethodAction(self.context, self, "Test2DArray", OfficeExtension.OperationType.Default, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def testEnum2DArray(self, values : 'list') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_TestEnum2DArray
        # End_PlaceHolder_TestCaseObject_TestEnum2DArray
        action = _createMethodAction(self.context, self, "TestEnum2DArray", OfficeExtension.OperationType.Default, [values])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def testEnumArray(self, values : 'list') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_TestEnumArray
        # End_PlaceHolder_TestCaseObject_TestEnumArray
        action = _createMethodAction(self.context, self, "TestEnumArray", OfficeExtension.OperationType.Default, [values])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def testJsonParse(self, value : 'str') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_TestJsonParse
        # End_PlaceHolder_TestCaseObject_TestJsonParse
        action = _createMethodAction(self.context, self, "TestJsonParse", OfficeExtension.OperationType.Default, [value])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def testJsonStringify(self, value : 'any') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_TestJsonStringify
        # End_PlaceHolder_TestCaseObject_TestJsonStringify
        action = _createMethodAction(self.context, self, "TestJsonStringify", OfficeExtension.OperationType.Default, [value])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def testParamBool(self, value : 'bool') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_TestParamBool
        # End_PlaceHolder_TestCaseObject_TestParamBool
        action = _createMethodAction(self.context, self, "TestParamBool", OfficeExtension.OperationType.Read, [value])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def testParamDateTime(self, value : 'datetime.datetime') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_TestParamDateTime
        # End_PlaceHolder_TestCaseObject_TestParamDateTime
        action = _createMethodAction(self.context, self, "TestParamDateTime", OfficeExtension.OperationType.Default, [value])
        ret = OfficeExtension.ClientResult(OfficeExtension.ClientResultProcessingType.date)
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def testParamDateTimeArray(self, value : 'list') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_TestParamDateTimeArray
        # End_PlaceHolder_TestCaseObject_TestParamDateTimeArray
        action = _createMethodAction(self.context, self, "TestParamDateTimeArray", OfficeExtension.OperationType.Default, [value])
        ret = OfficeExtension.ClientResult(OfficeExtension.ClientResultProcessingType.date)
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def testParamDouble(self, value : 'float') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_TestParamDouble
        # End_PlaceHolder_TestCaseObject_TestParamDouble
        action = _createMethodAction(self.context, self, "TestParamDouble", OfficeExtension.OperationType.Read, [value])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def testParamFloat(self, value : 'float') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_TestParamFloat
        # End_PlaceHolder_TestCaseObject_TestParamFloat
        action = _createMethodAction(self.context, self, "TestParamFloat", OfficeExtension.OperationType.Read, [value])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def testParamInt(self, value : 'int' = None) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_TestParamInt
        # End_PlaceHolder_TestCaseObject_TestParamInt
        action = _createMethodAction(self.context, self, "TestParamInt", OfficeExtension.OperationType.Read, [value])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def testParamNullableDateTime(self, value : 'datetime.datetime') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_TestParamNullableDateTime
        # End_PlaceHolder_TestCaseObject_TestParamNullableDateTime
        action = _createMethodAction(self.context, self, "TestParamNullableDateTime", OfficeExtension.OperationType.Default, [value])
        ret = OfficeExtension.ClientResult(OfficeExtension.ClientResultProcessingType.date)
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def testParamRange(self, value : 'Range') -> 'Range':
        # Begin_PlaceHolder_TestCaseObject_TestParamRange
        # End_PlaceHolder_TestCaseObject_TestParamRange
        ret = Range(self.context, _createMethodObjectPath(self.context, self, "TestParamRange", OfficeExtension.OperationType.Default, [value], False, False))
        return ret

    def testParamString(self, value : 'str' = None) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_TestParamString
        # End_PlaceHolder_TestCaseObject_TestParamString
        action = _createMethodAction(self.context, self, "TestParamString", OfficeExtension.OperationType.Read, [value])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def testUrlKeyValueDecode(self, value : 'str') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_TestUrlKeyValueDecode
        # End_PlaceHolder_TestCaseObject_TestUrlKeyValueDecode
        action = _createMethodAction(self.context, self, "TestUrlKeyValueDecode", OfficeExtension.OperationType.Read, [value])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def testUrlPathEncode(self, value : 'str') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TestCaseObject_TestUrlPathEncode
        # End_PlaceHolder_TestCaseObject_TestUrlPathEncode
        action = _createMethodAction(self.context, self, "TestUrlPathEncode", OfficeExtension.OperationType.Read, [value])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;

    @staticmethod
    def newObject(context: OfficeExtension.ClientRequestContext) -> 'TestCaseObject':
        ret = TestCaseObject(context, _createNewObjectObjectPath(context, "ExcelApi.TestCaseObject", False))
        return ret
    

class RangeSort(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_RangeSort_Custom_Members
    # End_PlaceHolder_RangeSort_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._fields = None
        self._fields2 = None
        self._queryField = None


    @property
    def fields(self) -> 'list':
        _loadIfInstantSyncExecutionMode(self, "fields", self._fields)
        _throwIfNotLoaded("fields", self._fields, "RangeSort", self._isNull)
        return self._fields
    

    @property
    def fields2(self) -> 'list':
        _loadIfInstantSyncExecutionMode(self, "fields2", self._fields2)
        _throwIfNotLoaded("fields2", self._fields2, "RangeSort", self._isNull)
        return self._fields2
    

    @fields2.setter
    def fields2(self, value : 'list'):
        self._fields2 = value
        _createSetPropertyAction(self.context, self, "Fields2", value)
        _syncIfInstantSyncExecutionMode(self)

    @property
    def queryField(self) -> 'QueryWithSortField':
        _loadIfInstantSyncExecutionMode(self, "queryField", self._queryField)
        _throwIfNotLoaded("queryField", self._queryField, "RangeSort", self._isNull)
        return self._queryField
    

    def apply(self, fields : 'list') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_RangeSort_Apply
        # End_PlaceHolder_RangeSort_Apply
        action = _createMethodAction(self.context, self, "Apply", OfficeExtension.OperationType.Default, [fields])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def applyAndReturnFirstField(self, fields : 'list') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_RangeSort_ApplyAndReturnFirstField
        # End_PlaceHolder_RangeSort_ApplyAndReturnFirstField
        action = _createMethodAction(self.context, self, "ApplyAndReturnFirstField", OfficeExtension.OperationType.Default, [fields])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def applyMixed(self, fields : 'list') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_RangeSort_ApplyMixed
        # End_PlaceHolder_RangeSort_ApplyMixed
        action = _createMethodAction(self.context, self, "ApplyMixed", OfficeExtension.OperationType.Default, [fields])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def applyQueryWithSortFieldAndReturnLast(self, fields : 'list') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_RangeSort_ApplyQueryWithSortFieldAndReturnLast
        # End_PlaceHolder_RangeSort_ApplyQueryWithSortFieldAndReturnLast
        action = _createMethodAction(self.context, self, "ApplyQueryWithSortFieldAndReturnLast", OfficeExtension.OperationType.Default, [fields])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def getFirstField(self, fields : 'list') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_RangeSort_GetFirstField
        # End_PlaceHolder_RangeSort_GetFirstField
        action = _createMethodAction(self.context, self, "GetFirstField", OfficeExtension.OperationType.Read, [fields])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;
        if "Fields" in obj:
            self._fields = obj.get("Fields")
        if "Fields2" in obj:
            self._fields2 = obj.get("Fields2")
        if "QueryField" in obj:
            self._queryField = obj.get("QueryField")
    
    def load(self, option = None) -> 'RangeSort':
        _load(self, option)
        return self
    
    def reload(self) -> 'RangeSort':
        _load(self, None)
        return self

class SortField:
    def __init__(self):
        self.assending = None
        self.columnIndex = None
        self.useCurrentCulture = None

    # Begin_PlaceHolder_SortField_Custom_Members
    # End_PlaceHolder_SortField_Custom_Members


class QueryWithSortField:
    def __init__(self):
        self.field = None
        self.rowLimit = None

    # Begin_PlaceHolder_QueryWithSortField_Custom_Members
    # End_PlaceHolder_QueryWithSortField_Custom_Members


class Row(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_Row_Custom_Members
    # End_PlaceHolder_Row_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._index = None


    @property
    def index(self) -> 'int':
        _loadIfInstantSyncExecutionMode(self, "index", self._index)
        _throwIfNotLoaded("index", self._index, "Row", self._isNull)
        return self._index
    

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;
        if "Index" in obj:
            self._index = obj.get("Index")
    
    def load(self, option = None) -> 'Row':
        _load(self, option)
        return self
    
    def reload(self) -> 'Row':
        _load(self, None)
        return self

class RowCollection(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_RowCollection_Custom_Members
    # End_PlaceHolder_RowCollection_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self.__items = None

    
    @property
    def items(self) -> 'list of Row':
        _loadIfInstantSyncExecutionMode(self, "items", self.__items)
        _throwIfNotLoaded("items", self.__items, "RowCollection", self._isNull)
        return self.__items
    

    def getCount(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_RowCollection_GetCount
        # End_PlaceHolder_RowCollection_GetCount
        action = _createMethodAction(self.context, self, "GetCount", OfficeExtension.OperationType.Read, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def getItemAt(self, index : 'int') -> 'Row':
        # Begin_PlaceHolder_RowCollection_GetItemAt
        # End_PlaceHolder_RowCollection_GetItemAt
        ret = Row(self.context, _createMethodObjectPath(self.context, self, "GetItemAt", OfficeExtension.OperationType.Read, [index], False, False))
        return ret

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;
        if OfficeExtension.Constants.items in obj:
            self.__items = []
            data = obj.get(OfficeExtension.Constants.items)
            for i, itemData in enumerate(data):
                item = Row(self.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(False, self.context, self, itemData, i))
                item._handleResult(itemData)
                self.__items.append(item)
    
    def load(self, option = None) -> 'RowCollection':
        _load(self, option)
        return self
    
    def reload(self) -> 'RowCollection':
        _load(self, None)
        return self

class SectionGroup(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_SectionGroup_Custom_Members
    # End_PlaceHolder_SectionGroup_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._id = None
        self._sectionGroups = None
        self._sections = None

    @property
    def sectionGroups(self) -> 'SectionGroupCollection':
        if self._sectionGroups is None:
            self._sectionGroups = SectionGroupCollection(self.context, _createPropertyObjectPath(self.context, self, "SectionGroups", True, False))
        return self._sectionGroups
    @property
    def sections(self) -> 'SectionCollection':
        if self._sections is None:
            self._sections = SectionCollection(self.context, _createPropertyObjectPath(self.context, self, "Sections", True, False))
        return self._sections

    @property
    def id(self) -> 'int':
        _loadIfInstantSyncExecutionMode(self, "id", self._id)
        _throwIfNotLoaded("id", self._id, "SectionGroup", self._isNull)
        return self._id
    

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;
        if "Id" in obj:
            self._id = obj.get("Id")
        if "SectionGroups" in obj:
            self.sectionGroups._handleResult(obj.get("SectionGroups"))
        if "Sections" in obj:
            self.sections._handleResult(obj.get("Sections"))
    
    def load(self, option = None) -> 'SectionGroup':
        _load(self, option)
        return self
    
    def reload(self) -> 'SectionGroup':
        _load(self, None)
        return self
    def _handleIdResult(self, value) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if value is None:
            return
        if "Id" in value:
            self._id = value.get("Id")
    
    def __str__(self) -> str:
        _loadIfInstantSyncExecutionMode(self, "Id", self._id)
        return str(self._id)

class SectionGroupCollection(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_SectionGroupCollection_Custom_Members
    # End_PlaceHolder_SectionGroupCollection_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self.__items = None

    
    @property
    def items(self) -> 'list of SectionGroup':
        _loadIfInstantSyncExecutionMode(self, "items", self.__items)
        _throwIfNotLoaded("items", self.__items, "SectionGroupCollection", self._isNull)
        return self.__items
    

    def getCount(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_SectionGroupCollection_GetCount
        # End_PlaceHolder_SectionGroupCollection_GetCount
        action = _createMethodAction(self.context, self, "GetCount", OfficeExtension.OperationType.Read, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        _syncIfInstantSyncExecutionMode(self)
        return ret

    def getItem(self, id : 'int') -> 'SectionGroup':
        # Begin_PlaceHolder_SectionGroupCollection_GetItem
        # End_PlaceHolder_SectionGroupCollection_GetItem
        return SectionGroup(self.context, _createIndexerObjectPath(self.context, self, [id]))

    def getItemAt(self, index : 'int') -> 'SectionGroup':
        # Begin_PlaceHolder_SectionGroupCollection_GetItemAt
        # End_PlaceHolder_SectionGroupCollection_GetItemAt
        ret = SectionGroup(self.context, _createMethodObjectPath(self.context, self, "GetItemAt", OfficeExtension.OperationType.Read, [index], False, False))
        return ret

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;
        if OfficeExtension.Constants.items in obj:
            self.__items = []
            data = obj.get(OfficeExtension.Constants.items)
            for i, itemData in enumerate(data):
                item = SectionGroup(self.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(True, self.context, self, itemData, i))
                item._handleResult(itemData)
                self.__items.append(item)
    
    def load(self, option = None) -> 'SectionGroupCollection':
        _load(self, option)
        return self
    
    def reload(self) -> 'SectionGroupCollection':
        _load(self, None)
        return self

class Section(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_Section_Custom_Members
    # End_PlaceHolder_Section_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._charts = None
        self._id = None

    @property
    def charts(self) -> 'ChartCollection':
        if self._charts is None:
            self._charts = ChartCollection(self.context, _createPropertyObjectPath(self.context, self, "Charts", True, False))
        return self._charts

    @property
    def id(self) -> 'int':
        _loadIfInstantSyncExecutionMode(self, "id", self._id)
        _throwIfNotLoaded("id", self._id, "Section", self._isNull)
        return self._id
    

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;
        if "Id" in obj:
            self._id = obj.get("Id")
        if "Charts" in obj:
            self.charts._handleResult(obj.get("Charts"))
    
    def load(self, option = None) -> 'Section':
        _load(self, option)
        return self
    
    def reload(self) -> 'Section':
        _load(self, None)
        return self
    def _handleIdResult(self, value) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if value is None:
            return
        if "Id" in value:
            self._id = value.get("Id")
    
    def __str__(self) -> str:
        _loadIfInstantSyncExecutionMode(self, "Id", self._id)
        return str(self._id)

class SectionCollection(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_SectionCollection_Custom_Members
    # End_PlaceHolder_SectionCollection_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self.__items = None

    
    @property
    def items(self) -> 'list of Section':
        _loadIfInstantSyncExecutionMode(self, "items", self.__items)
        _throwIfNotLoaded("items", self.__items, "SectionCollection", self._isNull)
        return self.__items
    

    def getItem(self, id : 'int') -> 'Section':
        # Begin_PlaceHolder_SectionCollection_GetItem
        # End_PlaceHolder_SectionCollection_GetItem
        return Section(self.context, _createIndexerObjectPath(self.context, self, [id]))

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        super(self.__class__, self)._handleIdResult(value)
        if _isNullOrUndefined(value):
            return
        obj = value;
        if OfficeExtension.Constants.items in obj:
            self.__items = []
            data = obj.get(OfficeExtension.Constants.items)
            for i, itemData in enumerate(data):
                item = Section(self.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(True, self.context, self, itemData, i))
                item._handleResult(itemData)
                self.__items.append(item)
    
    def load(self, option = None) -> 'SectionCollection':
        _load(self, option)
        return self
    
    def reload(self) -> 'SectionCollection':
        _load(self, None)
        return self

# Begin_PlaceHolder_GlobalFooter
class RequestContext(OfficeExtension.ClientRequestContext):
    def __init__(self, url: str = None, executionMode: OfficeExtension.RequestExecutionMode = OfficeExtension.RequestExecutionMode.batch):
        super(self.__class__, self).__init__(url, executionMode)
        objectPath = OfficeExtension.ObjectPathFactory.createGlobalObjectObjectPath(self)
        self._application = Application(self, objectPath)

    @property
    def application(self) -> Application:
        return self._application

def createInstantContext():
    ret = RequestContext("pipe://./fakeexcel/_api", OfficeExtension.RequestExecutionMode.instantSync)
    return ret
# End_PlaceHolder_GlobalFooter

