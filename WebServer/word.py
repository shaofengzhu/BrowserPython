#
# This is a generated file. 
# If there are content placeholders, only edit content inside content placeholders.
# If there are no content placeholders, do not edit this file directly.
#
import sys
import json
import enum
import logging

# Begin_PlaceHolder_GlobalHeader
import runtime as OfficeExtension
# End_PlaceHolder_GlobalHeader

_createPropertyObjectPath = OfficeExtension.ObjectPathFactory.createPropertyObjectPath;
_createMethodObjectPath = OfficeExtension.ObjectPathFactory.createMethodObjectPath;
_createIndexerObjectPath = OfficeExtension.ObjectPathFactory.createIndexerObjectPath;
_createNewObjectObjectPath = OfficeExtension.ObjectPathFactory.createNewObjectObjectPath;
_createChildItemObjectPathUsingIndexer = OfficeExtension.ObjectPathFactory.createChildItemObjectPathUsingIndexer;
_createChildItemObjectPathUsingGetItemAt = OfficeExtension.ObjectPathFactory.createChildItemObjectPathUsingGetItemAt;
_createChildItemObjectPathUsingIndexerOrGetItemAt = OfficeExtension.ObjectPathFactory.createChildItemObjectPathUsingIndexerOrGetItemAt;
_createMethodAction = OfficeExtension.ActionFactory.createMethodAction;
_createSetPropertyAction = OfficeExtension.ActionFactory.createSetPropertyAction;
_isNullOrUndefined = OfficeExtension.Utility.isNullOrUndefined;
_isUndefined = OfficeExtension.Utility.isUndefined;
_throwIfNotLoaded = OfficeExtension.Utility.throwIfNotLoaded;
_load = OfficeExtension.Utility.load;
_fixObjectPathIfNecessary = OfficeExtension.Utility.fixObjectPathIfNecessary;
_addActionResultHandler = OfficeExtension.Utility._addActionResultHandler;

class Application(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_Application_Custom_Members
    # End_PlaceHolder_Application_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)


    def createDocument(self, base64File : 'str' = None) -> 'Document':
    	# Begin_PlaceHolder_Application_CreateDocument
    	# End_PlaceHolder_Application_CreateDocument
        return Document(self.context, _createMethodObjectPath(self.context, self, "CreateDocument", OfficeExtension.OperationType.Read, [base64File], False, False))

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);

    @staticmethod
    def newObject(context: OfficeExtension.ClientRequestContext) -> 'Application':
        ret = Application(context, _createNewObjectObjectPath(context, "Microsoft.WordServices.Application", False))
        return ret
    

class Body(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_Body_Custom_Members
    # End_PlaceHolder_Body_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._contentControls = None
        self._font = None
        self._inlinePictures = None
        self._lists = None
        self._paragraphs = None
        self._parentBody = None
        self._parentContentControl = None
        self._parentSection = None
        self._style = None
        self._styleBuiltIn = None
        self._tables = None
        self._text = None
        self._type = None
        self.__ReferenceId = None

    @property
    def contentControls(self) -> 'ContentControlCollection':
        if self._contentControls is None:
            self._contentControls = ContentControlCollection(self.context, _createPropertyObjectPath(self.context, self, "ContentControls", True, False))
        return self._contentControls
    @property
    def font(self) -> 'Font':
        if self._font is None:
            self._font = Font(self.context, _createPropertyObjectPath(self.context, self, "Font", False, False))
        return self._font
    @property
    def inlinePictures(self) -> 'InlinePictureCollection':
        if self._inlinePictures is None:
            self._inlinePictures = InlinePictureCollection(self.context, _createPropertyObjectPath(self.context, self, "InlinePictures", True, False))
        return self._inlinePictures
    @property
    def lists(self) -> 'ListCollection':
        if self._lists is None:
            self._lists = ListCollection(self.context, _createPropertyObjectPath(self.context, self, "Lists", True, False))
        return self._lists
    @property
    def paragraphs(self) -> 'ParagraphCollection':
        if self._paragraphs is None:
            self._paragraphs = ParagraphCollection(self.context, _createPropertyObjectPath(self.context, self, "Paragraphs", True, False))
        return self._paragraphs
    @property
    def parentBody(self) -> 'Body':
        if self._parentBody is None:
            self._parentBody = Body(self.context, _createPropertyObjectPath(self.context, self, "ParentBody", False, False))
        return self._parentBody
    @property
    def parentContentControl(self) -> 'ContentControl':
        if self._parentContentControl is None:
            self._parentContentControl = ContentControl(self.context, _createPropertyObjectPath(self.context, self, "ParentContentControl", False, False))
        return self._parentContentControl
    @property
    def parentSection(self) -> 'Section':
        if self._parentSection is None:
            self._parentSection = Section(self.context, _createPropertyObjectPath(self.context, self, "ParentSection", False, False))
        return self._parentSection
    @property
    def tables(self) -> 'TableCollection':
        if self._tables is None:
            self._tables = TableCollection(self.context, _createPropertyObjectPath(self.context, self, "Tables", True, False))
        return self._tables

    @property
    def style(self) -> 'str':
        _throwIfNotLoaded("style", self._style)
        return self._style
    

    @style.setter
    def style(self, value : 'str'):
        self._style = value
        _createSetPropertyAction(self.context, self, "Style", value)
    

    @property
    def styleBuiltIn(self) -> 'str':
        _throwIfNotLoaded("styleBuiltIn", self._styleBuiltIn)
        return self._styleBuiltIn
    

    @styleBuiltIn.setter
    def styleBuiltIn(self, value : 'str'):
        self._styleBuiltIn = value
        _createSetPropertyAction(self.context, self, "StyleBuiltIn", value)
    

    @property
    def text(self) -> 'str':
        _throwIfNotLoaded("text", self._text)
        return self._text
    

    @property
    def type(self) -> 'str':
        _throwIfNotLoaded("type", self._type)
        return self._type
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def clear(self) -> None:
    	# Begin_PlaceHolder_Body_Clear
    	# End_PlaceHolder_Body_Clear
        _createMethodAction(self.context, self, "Clear", OfficeExtension.OperationType.Default, [])

    def getHtml(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Body_GetHtml
        # End_PlaceHolder_Body_GetHtml
        action = _createMethodAction(self.context, self, "GetHtml", OfficeExtension.OperationType.Read, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        return ret

    def getOoxml(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Body_GetOoxml
        # End_PlaceHolder_Body_GetOoxml
        action = _createMethodAction(self.context, self, "GetOoxml", OfficeExtension.OperationType.Read, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        return ret

    def getRange(self, rangeLocation : 'str' = None) -> 'Range':
    	# Begin_PlaceHolder_Body_GetRange
    	# End_PlaceHolder_Body_GetRange
        return Range(self.context, _createMethodObjectPath(self.context, self, "GetRange", OfficeExtension.OperationType.Read, [rangeLocation], False, False))

    def insertBreak(self, breakType : 'str', insertLocation : 'str') -> None:
    	# Begin_PlaceHolder_Body_InsertBreak
    	# End_PlaceHolder_Body_InsertBreak
        _createMethodAction(self.context, self, "InsertBreak", OfficeExtension.OperationType.Default, [breakType, insertLocation])

    def insertContentControl(self) -> 'ContentControl':
    	# Begin_PlaceHolder_Body_InsertContentControl
    	# End_PlaceHolder_Body_InsertContentControl
        return ContentControl(self.context, _createMethodObjectPath(self.context, self, "InsertContentControl", OfficeExtension.OperationType.Default, [], False, True))

    def insertFileFromBase64(self, base64File : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_Body_InsertFileFromBase64
    	# End_PlaceHolder_Body_InsertFileFromBase64
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertFileFromBase64", OfficeExtension.OperationType.Default, [base64File, insertLocation], False, True))

    def insertHtml(self, html : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_Body_InsertHtml
    	# End_PlaceHolder_Body_InsertHtml
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertHtml", OfficeExtension.OperationType.Default, [html, insertLocation], False, True))

    def insertInlinePictureFromBase64(self, base64EncodedImage : 'str', insertLocation : 'str') -> 'InlinePicture':
    	# Begin_PlaceHolder_Body_InsertInlinePictureFromBase64
    	# End_PlaceHolder_Body_InsertInlinePictureFromBase64
        return InlinePicture(self.context, _createMethodObjectPath(self.context, self, "InsertInlinePictureFromBase64", OfficeExtension.OperationType.Default, [base64EncodedImage, insertLocation], False, True))

    def insertOoxml(self, ooxml : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_Body_InsertOoxml
    	# End_PlaceHolder_Body_InsertOoxml
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertOoxml", OfficeExtension.OperationType.Default, [ooxml, insertLocation], False, True))

    def insertParagraph(self, paragraphText : 'str', insertLocation : 'str') -> 'Paragraph':
    	# Begin_PlaceHolder_Body_InsertParagraph
    	# End_PlaceHolder_Body_InsertParagraph
        return Paragraph(self.context, _createMethodObjectPath(self.context, self, "InsertParagraph", OfficeExtension.OperationType.Default, [paragraphText, insertLocation], False, True))

    def insertTable(self, rowCount : 'int', columnCount : 'int', insertLocation : 'str', values : 'list' = None) -> 'Table':
    	# Begin_PlaceHolder_Body_InsertTable
    	# End_PlaceHolder_Body_InsertTable
        return Table(self.context, _createMethodObjectPath(self.context, self, "InsertTable", OfficeExtension.OperationType.Default, [rowCount, columnCount, insertLocation, values], False, True))

    def insertText(self, text : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_Body_InsertText
    	# End_PlaceHolder_Body_InsertText
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertText", OfficeExtension.OperationType.Default, [text, insertLocation], False, True))

    def search(self, searchText : 'str', searchOptions : 'SearchOptions' = None) -> 'RangeCollection':
    	# Begin_PlaceHolder_Body_Search
    	# End_PlaceHolder_Body_Search
        return RangeCollection(self.context, _createMethodObjectPath(self.context, self, "Search", OfficeExtension.OperationType.Read, [searchText, searchOptions], True, True))

    def select(self, selectionMode : 'str' = None) -> None:
    	# Begin_PlaceHolder_Body_Select
    	# End_PlaceHolder_Body_Select
        _createMethodAction(self.context, self, "Select", OfficeExtension.OperationType.Read, [selectionMode])

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_Body__KeepReference
    	# End_PlaceHolder_Body__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("Style")):
            self._style = obj.get("Style")
        if not _isUndefined(obj.get("StyleBuiltIn")):
            self._styleBuiltIn = obj.get("StyleBuiltIn")
        if not _isUndefined(obj.get("Text")):
            self._text = obj.get("Text")
        if not _isUndefined(obj.get("Type")):
            self._type = obj.get("Type")
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isUndefined(obj.get("ContentControls")):
            self.contentControls._handleResult(obj.get("ContentControls"))
        if not _isUndefined(obj.get("Font")):
            self.font._handleResult(obj.get("Font"))
        if not _isUndefined(obj.get("InlinePictures")):
            self.inlinePictures._handleResult(obj.get("InlinePictures"))
        if not _isUndefined(obj.get("Lists")):
            self.lists._handleResult(obj.get("Lists"))
        if not _isUndefined(obj.get("Paragraphs")):
            self.paragraphs._handleResult(obj.get("Paragraphs"))
        if not _isUndefined(obj.get("ParentBody")):
            self.parentBody._handleResult(obj.get("ParentBody"))
        if not _isUndefined(obj.get("ParentContentControl")):
            self.parentContentControl._handleResult(obj.get("ParentContentControl"))
        if not _isUndefined(obj.get("ParentSection")):
            self.parentSection._handleResult(obj.get("ParentSection"))
        if not _isUndefined(obj.get("Tables")):
            self.tables._handleResult(obj.get("Tables"))
    
    def load(self, option = None) -> 'Body':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class ContentControl(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_ContentControl_Custom_Members
    # End_PlaceHolder_ContentControl_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._appearance = None
        self._cannotDelete = None
        self._cannotEdit = None
        self._color = None
        self._contentControls = None
        self._font = None
        self._id = None
        self._inlinePictures = None
        self._lists = None
        self._paragraphs = None
        self._parentBody = None
        self._parentContentControl = None
        self._parentTable = None
        self._parentTableCell = None
        self._placeholderText = None
        self._removeWhenEdited = None
        self._style = None
        self._styleBuiltIn = None
        self._subtype = None
        self._tables = None
        self._tag = None
        self._text = None
        self._title = None
        self._type = None
        self.__ReferenceId = None

    @property
    def contentControls(self) -> 'ContentControlCollection':
        if self._contentControls is None:
            self._contentControls = ContentControlCollection(self.context, _createPropertyObjectPath(self.context, self, "ContentControls", True, False))
        return self._contentControls
    @property
    def font(self) -> 'Font':
        if self._font is None:
            self._font = Font(self.context, _createPropertyObjectPath(self.context, self, "Font", False, False))
        return self._font
    @property
    def inlinePictures(self) -> 'InlinePictureCollection':
        if self._inlinePictures is None:
            self._inlinePictures = InlinePictureCollection(self.context, _createPropertyObjectPath(self.context, self, "InlinePictures", True, False))
        return self._inlinePictures
    @property
    def lists(self) -> 'ListCollection':
        if self._lists is None:
            self._lists = ListCollection(self.context, _createPropertyObjectPath(self.context, self, "Lists", True, False))
        return self._lists
    @property
    def paragraphs(self) -> 'ParagraphCollection':
        if self._paragraphs is None:
            self._paragraphs = ParagraphCollection(self.context, _createPropertyObjectPath(self.context, self, "Paragraphs", True, False))
        return self._paragraphs
    @property
    def parentBody(self) -> 'Body':
        if self._parentBody is None:
            self._parentBody = Body(self.context, _createPropertyObjectPath(self.context, self, "ParentBody", False, False))
        return self._parentBody
    @property
    def parentContentControl(self) -> 'ContentControl':
        if self._parentContentControl is None:
            self._parentContentControl = ContentControl(self.context, _createPropertyObjectPath(self.context, self, "ParentContentControl", False, False))
        return self._parentContentControl
    @property
    def parentTable(self) -> 'Table':
        if self._parentTable is None:
            self._parentTable = Table(self.context, _createPropertyObjectPath(self.context, self, "ParentTable", False, False))
        return self._parentTable
    @property
    def parentTableCell(self) -> 'TableCell':
        if self._parentTableCell is None:
            self._parentTableCell = TableCell(self.context, _createPropertyObjectPath(self.context, self, "ParentTableCell", False, False))
        return self._parentTableCell
    @property
    def tables(self) -> 'TableCollection':
        if self._tables is None:
            self._tables = TableCollection(self.context, _createPropertyObjectPath(self.context, self, "Tables", True, False))
        return self._tables

    @property
    def appearance(self) -> 'str':
        _throwIfNotLoaded("appearance", self._appearance)
        return self._appearance
    

    @appearance.setter
    def appearance(self, value : 'str'):
        self._appearance = value
        _createSetPropertyAction(self.context, self, "Appearance", value)
    

    @property
    def cannotDelete(self) -> 'bool':
        _throwIfNotLoaded("cannotDelete", self._cannotDelete)
        return self._cannotDelete
    

    @cannotDelete.setter
    def cannotDelete(self, value : 'bool'):
        self._cannotDelete = value
        _createSetPropertyAction(self.context, self, "CannotDelete", value)
    

    @property
    def cannotEdit(self) -> 'bool':
        _throwIfNotLoaded("cannotEdit", self._cannotEdit)
        return self._cannotEdit
    

    @cannotEdit.setter
    def cannotEdit(self, value : 'bool'):
        self._cannotEdit = value
        _createSetPropertyAction(self.context, self, "CannotEdit", value)
    

    @property
    def color(self) -> 'str':
        _throwIfNotLoaded("color", self._color)
        return self._color
    

    @color.setter
    def color(self, value : 'str'):
        self._color = value
        _createSetPropertyAction(self.context, self, "Color", value)
    

    @property
    def id(self) -> 'int':
        _throwIfNotLoaded("id", self._id)
        return self._id
    

    @property
    def placeholderText(self) -> 'str':
        _throwIfNotLoaded("placeholderText", self._placeholderText)
        return self._placeholderText
    

    @placeholderText.setter
    def placeholderText(self, value : 'str'):
        self._placeholderText = value
        _createSetPropertyAction(self.context, self, "PlaceholderText", value)
    

    @property
    def removeWhenEdited(self) -> 'bool':
        _throwIfNotLoaded("removeWhenEdited", self._removeWhenEdited)
        return self._removeWhenEdited
    

    @removeWhenEdited.setter
    def removeWhenEdited(self, value : 'bool'):
        self._removeWhenEdited = value
        _createSetPropertyAction(self.context, self, "RemoveWhenEdited", value)
    

    @property
    def style(self) -> 'str':
        _throwIfNotLoaded("style", self._style)
        return self._style
    

    @style.setter
    def style(self, value : 'str'):
        self._style = value
        _createSetPropertyAction(self.context, self, "Style", value)
    

    @property
    def styleBuiltIn(self) -> 'str':
        _throwIfNotLoaded("styleBuiltIn", self._styleBuiltIn)
        return self._styleBuiltIn
    

    @styleBuiltIn.setter
    def styleBuiltIn(self, value : 'str'):
        self._styleBuiltIn = value
        _createSetPropertyAction(self.context, self, "StyleBuiltIn", value)
    

    @property
    def subtype(self) -> 'str':
        _throwIfNotLoaded("subtype", self._subtype)
        return self._subtype
    

    @property
    def tag(self) -> 'str':
        _throwIfNotLoaded("tag", self._tag)
        return self._tag
    

    @tag.setter
    def tag(self, value : 'str'):
        self._tag = value
        _createSetPropertyAction(self.context, self, "Tag", value)
    

    @property
    def text(self) -> 'str':
        _throwIfNotLoaded("text", self._text)
        return self._text
    

    @property
    def title(self) -> 'str':
        _throwIfNotLoaded("title", self._title)
        return self._title
    

    @title.setter
    def title(self, value : 'str'):
        self._title = value
        _createSetPropertyAction(self.context, self, "Title", value)
    

    @property
    def type(self) -> 'str':
        _throwIfNotLoaded("type", self._type)
        return self._type
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def clear(self) -> None:
    	# Begin_PlaceHolder_ContentControl_Clear
    	# End_PlaceHolder_ContentControl_Clear
        _createMethodAction(self.context, self, "Clear", OfficeExtension.OperationType.Default, [])

    def delete(self, keepContent : 'bool') -> None:
    	# Begin_PlaceHolder_ContentControl_Delete
    	# End_PlaceHolder_ContentControl_Delete
        _createMethodAction(self.context, self, "Delete", OfficeExtension.OperationType.Default, [keepContent])

    def getHtml(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_ContentControl_GetHtml
        # End_PlaceHolder_ContentControl_GetHtml
        action = _createMethodAction(self.context, self, "GetHtml", OfficeExtension.OperationType.Read, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        return ret

    def getOoxml(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_ContentControl_GetOoxml
        # End_PlaceHolder_ContentControl_GetOoxml
        action = _createMethodAction(self.context, self, "GetOoxml", OfficeExtension.OperationType.Read, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        return ret

    def getRange(self, rangeLocation : 'str' = None) -> 'Range':
    	# Begin_PlaceHolder_ContentControl_GetRange
    	# End_PlaceHolder_ContentControl_GetRange
        return Range(self.context, _createMethodObjectPath(self.context, self, "GetRange", OfficeExtension.OperationType.Read, [rangeLocation], False, False))

    def getTextRanges(self, endingMarks : 'list', trimSpacing : 'bool' = None) -> 'RangeCollection':
    	# Begin_PlaceHolder_ContentControl_GetTextRanges
    	# End_PlaceHolder_ContentControl_GetTextRanges
        return RangeCollection(self.context, _createMethodObjectPath(self.context, self, "GetTextRanges", OfficeExtension.OperationType.Read, [endingMarks, trimSpacing], True, False))

    def insertBreak(self, breakType : 'str', insertLocation : 'str') -> None:
    	# Begin_PlaceHolder_ContentControl_InsertBreak
    	# End_PlaceHolder_ContentControl_InsertBreak
        _createMethodAction(self.context, self, "InsertBreak", OfficeExtension.OperationType.Default, [breakType, insertLocation])

    def insertFileFromBase64(self, base64File : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_ContentControl_InsertFileFromBase64
    	# End_PlaceHolder_ContentControl_InsertFileFromBase64
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertFileFromBase64", OfficeExtension.OperationType.Default, [base64File, insertLocation], False, True))

    def insertHtml(self, html : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_ContentControl_InsertHtml
    	# End_PlaceHolder_ContentControl_InsertHtml
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertHtml", OfficeExtension.OperationType.Default, [html, insertLocation], False, True))

    def insertInlinePictureFromBase64(self, base64EncodedImage : 'str', insertLocation : 'str') -> 'InlinePicture':
    	# Begin_PlaceHolder_ContentControl_InsertInlinePictureFromBase64
    	# End_PlaceHolder_ContentControl_InsertInlinePictureFromBase64
        return InlinePicture(self.context, _createMethodObjectPath(self.context, self, "InsertInlinePictureFromBase64", OfficeExtension.OperationType.Default, [base64EncodedImage, insertLocation], False, True))

    def insertOoxml(self, ooxml : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_ContentControl_InsertOoxml
    	# End_PlaceHolder_ContentControl_InsertOoxml
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertOoxml", OfficeExtension.OperationType.Default, [ooxml, insertLocation], False, True))

    def insertParagraph(self, paragraphText : 'str', insertLocation : 'str') -> 'Paragraph':
    	# Begin_PlaceHolder_ContentControl_InsertParagraph
    	# End_PlaceHolder_ContentControl_InsertParagraph
        return Paragraph(self.context, _createMethodObjectPath(self.context, self, "InsertParagraph", OfficeExtension.OperationType.Default, [paragraphText, insertLocation], False, True))

    def insertTable(self, rowCount : 'int', columnCount : 'int', insertLocation : 'str', values : 'list' = None) -> 'Table':
    	# Begin_PlaceHolder_ContentControl_InsertTable
    	# End_PlaceHolder_ContentControl_InsertTable
        return Table(self.context, _createMethodObjectPath(self.context, self, "InsertTable", OfficeExtension.OperationType.Default, [rowCount, columnCount, insertLocation, values], False, True))

    def insertText(self, text : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_ContentControl_InsertText
    	# End_PlaceHolder_ContentControl_InsertText
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertText", OfficeExtension.OperationType.Default, [text, insertLocation], False, True))

    def search(self, searchText : 'str', searchOptions : 'SearchOptions' = None) -> 'RangeCollection':
    	# Begin_PlaceHolder_ContentControl_Search
    	# End_PlaceHolder_ContentControl_Search
        return RangeCollection(self.context, _createMethodObjectPath(self.context, self, "Search", OfficeExtension.OperationType.Read, [searchText, searchOptions], True, True))

    def select(self, selectionMode : 'str' = None) -> None:
    	# Begin_PlaceHolder_ContentControl_Select
    	# End_PlaceHolder_ContentControl_Select
        _createMethodAction(self.context, self, "Select", OfficeExtension.OperationType.Read, [selectionMode])

    def split(self, delimiters : 'list', multiParagraphs : 'bool' = None, trimDelimiters : 'bool' = None, trimSpacing : 'bool' = None) -> 'RangeCollection':
    	# Begin_PlaceHolder_ContentControl_Split
    	# End_PlaceHolder_ContentControl_Split
        return RangeCollection(self.context, _createMethodObjectPath(self.context, self, "Split", OfficeExtension.OperationType.Read, [delimiters, multiParagraphs, trimDelimiters, trimSpacing], True, False))

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_ContentControl__KeepReference
    	# End_PlaceHolder_ContentControl__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("Appearance")):
            self._appearance = obj.get("Appearance")
        if not _isUndefined(obj.get("CannotDelete")):
            self._cannotDelete = obj.get("CannotDelete")
        if not _isUndefined(obj.get("CannotEdit")):
            self._cannotEdit = obj.get("CannotEdit")
        if not _isUndefined(obj.get("Color")):
            self._color = obj.get("Color")
        if not _isUndefined(obj.get("Id")):
            self._id = obj.get("Id")
        if not _isUndefined(obj.get("PlaceholderText")):
            self._placeholderText = obj.get("PlaceholderText")
        if not _isUndefined(obj.get("RemoveWhenEdited")):
            self._removeWhenEdited = obj.get("RemoveWhenEdited")
        if not _isUndefined(obj.get("Style")):
            self._style = obj.get("Style")
        if not _isUndefined(obj.get("StyleBuiltIn")):
            self._styleBuiltIn = obj.get("StyleBuiltIn")
        if not _isUndefined(obj.get("Subtype")):
            self._subtype = obj.get("Subtype")
        if not _isUndefined(obj.get("Tag")):
            self._tag = obj.get("Tag")
        if not _isUndefined(obj.get("Text")):
            self._text = obj.get("Text")
        if not _isUndefined(obj.get("Title")):
            self._title = obj.get("Title")
        if not _isUndefined(obj.get("Type")):
            self._type = obj.get("Type")
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isUndefined(obj.get("ContentControls")):
            self.contentControls._handleResult(obj.get("ContentControls"))
        if not _isUndefined(obj.get("Font")):
            self.font._handleResult(obj.get("Font"))
        if not _isUndefined(obj.get("InlinePictures")):
            self.inlinePictures._handleResult(obj.get("InlinePictures"))
        if not _isUndefined(obj.get("Lists")):
            self.lists._handleResult(obj.get("Lists"))
        if not _isUndefined(obj.get("Paragraphs")):
            self.paragraphs._handleResult(obj.get("Paragraphs"))
        if not _isUndefined(obj.get("ParentBody")):
            self.parentBody._handleResult(obj.get("ParentBody"))
        if not _isUndefined(obj.get("ParentContentControl")):
            self.parentContentControl._handleResult(obj.get("ParentContentControl"))
        if not _isUndefined(obj.get("ParentTable")):
            self.parentTable._handleResult(obj.get("ParentTable"))
        if not _isUndefined(obj.get("ParentTableCell")):
            self.parentTableCell._handleResult(obj.get("ParentTableCell"))
        if not _isUndefined(obj.get("Tables")):
            self.tables._handleResult(obj.get("Tables"))
    
    def load(self, option = None) -> 'ContentControl':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class ContentControlCollection(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_ContentControlCollection_Custom_Members
    # End_PlaceHolder_ContentControlCollection_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self.__ReferenceId = None
        self.__items = None

    
    @property
    def items(self) -> 'list of ContentControl':
        _throwIfNotLoaded("items", self.__items)
        return self.__items
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def getById(self, id : 'int') -> 'ContentControl':
    	# Begin_PlaceHolder_ContentControlCollection_GetById
    	# End_PlaceHolder_ContentControlCollection_GetById
        return ContentControl(self.context, _createMethodObjectPath(self.context, self, "GetById", OfficeExtension.OperationType.Read, [id], False, False))

    def getByTag(self, tag : 'str') -> 'ContentControlCollection':
    	# Begin_PlaceHolder_ContentControlCollection_GetByTag
    	# End_PlaceHolder_ContentControlCollection_GetByTag
        return ContentControlCollection(self.context, _createMethodObjectPath(self.context, self, "GetByTag", OfficeExtension.OperationType.Read, [tag], True, False))

    def getByTitle(self, title : 'str') -> 'ContentControlCollection':
    	# Begin_PlaceHolder_ContentControlCollection_GetByTitle
    	# End_PlaceHolder_ContentControlCollection_GetByTitle
        return ContentControlCollection(self.context, _createMethodObjectPath(self.context, self, "GetByTitle", OfficeExtension.OperationType.Read, [title], True, False))

    def getByTypes(self, types : 'list') -> 'ContentControlCollection':
    	# Begin_PlaceHolder_ContentControlCollection_GetByTypes
    	# End_PlaceHolder_ContentControlCollection_GetByTypes
        return ContentControlCollection(self.context, _createMethodObjectPath(self.context, self, "GetByTypes", OfficeExtension.OperationType.Read, [types], True, False))

    def getFirst(self) -> 'ContentControl':
    	# Begin_PlaceHolder_ContentControlCollection_GetFirst
    	# End_PlaceHolder_ContentControlCollection_GetFirst
        return ContentControl(self.context, _createMethodObjectPath(self.context, self, "GetFirst", OfficeExtension.OperationType.Read, [], False, False))

    def getItem(self, index : 'any') -> 'ContentControl':
    	# Begin_PlaceHolder_ContentControlCollection_GetItem
    	# End_PlaceHolder_ContentControlCollection_GetItem
        return ContentControl(self.context, _createIndexerObjectPath(self.context, self, [index]))

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_ContentControlCollection__KeepReference
    	# End_PlaceHolder_ContentControlCollection__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isNullOrUndefined(obj.get(OfficeExtension.Constants.items)):
            self.__items = []
            data = obj.get(OfficeExtension.Constants.items)
            for i, itemData in enumerate(data):
                item = ContentControl(self.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(True, self.context, self, itemData, i))
                item._handleResult(itemData)
                self.__items.append(item)
    
    def load(self, option = None) -> 'ContentControlCollection':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class CustomProperty(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_CustomProperty_Custom_Members
    # End_PlaceHolder_CustomProperty_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._key = None
        self._type = None
        self._value = None
        self.__ReferenceId = None


    @property
    def key(self) -> 'str':
        _throwIfNotLoaded("key", self._key)
        return self._key
    

    @property
    def type(self) -> 'str':
        _throwIfNotLoaded("type", self._type)
        return self._type
    

    @property
    def value(self) -> 'any':
        _throwIfNotLoaded("value", self._value)
        return self._value
    

    @value.setter
    def value(self, value : 'any'):
        self._value = value
        _createSetPropertyAction(self.context, self, "Value", value)
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def delete(self) -> None:
    	# Begin_PlaceHolder_CustomProperty_Delete
    	# End_PlaceHolder_CustomProperty_Delete
        _createMethodAction(self.context, self, "Delete", OfficeExtension.OperationType.Default, [])

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_CustomProperty__KeepReference
    	# End_PlaceHolder_CustomProperty__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("Key")):
            self._key = obj.get("Key")
        if not _isUndefined(obj.get("Type")):
            self._type = obj.get("Type")
        if not _isUndefined(obj.get("Value")):
            self._value = obj.get("Value")
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
    
    def load(self, option = None) -> 'CustomProperty':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class CustomPropertyCollection(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_CustomPropertyCollection_Custom_Members
    # End_PlaceHolder_CustomPropertyCollection_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self.__ReferenceId = None
        self.__items = None

    
    @property
    def items(self) -> 'list of CustomProperty':
        _throwIfNotLoaded("items", self.__items)
        return self.__items
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def deleteAll(self) -> None:
    	# Begin_PlaceHolder_CustomPropertyCollection_DeleteAll
    	# End_PlaceHolder_CustomPropertyCollection_DeleteAll
        _createMethodAction(self.context, self, "DeleteAll", OfficeExtension.OperationType.Default, [])

    def getCount(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_CustomPropertyCollection_GetCount
        # End_PlaceHolder_CustomPropertyCollection_GetCount
        action = _createMethodAction(self.context, self, "GetCount", OfficeExtension.OperationType.Default, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        return ret

    def getItem(self, key : 'str') -> 'CustomProperty':
    	# Begin_PlaceHolder_CustomPropertyCollection_GetItem
    	# End_PlaceHolder_CustomPropertyCollection_GetItem
        return CustomProperty(self.context, _createIndexerObjectPath(self.context, self, [key]))

    def set(self, key : 'str', value : 'any') -> 'CustomProperty':
    	# Begin_PlaceHolder_CustomPropertyCollection_Set
    	# End_PlaceHolder_CustomPropertyCollection_Set
        return CustomProperty(self.context, _createMethodObjectPath(self.context, self, "Set", OfficeExtension.OperationType.Default, [key, value], False, False))

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_CustomPropertyCollection__KeepReference
    	# End_PlaceHolder_CustomPropertyCollection__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isNullOrUndefined(obj.get(OfficeExtension.Constants.items)):
            self.__items = []
            data = obj.get(OfficeExtension.Constants.items)
            for i, itemData in enumerate(data):
                item = CustomProperty(self.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(True, self.context, self, itemData, i))
                item._handleResult(itemData)
                self.__items.append(item)
    
    def load(self, option = None) -> 'CustomPropertyCollection':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class Document(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_Document_Custom_Members
    # End_PlaceHolder_Document_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._body = None
        self._contentControls = None
        self._properties = None
        self._saved = None
        self._sections = None
        self.__ReferenceId = None

    @property
    def body(self) -> 'Body':
        if self._body is None:
            self._body = Body(self.context, _createPropertyObjectPath(self.context, self, "Body", False, False))
        return self._body
    @property
    def contentControls(self) -> 'ContentControlCollection':
        if self._contentControls is None:
            self._contentControls = ContentControlCollection(self.context, _createPropertyObjectPath(self.context, self, "ContentControls", True, False))
        return self._contentControls
    @property
    def properties(self) -> 'DocumentProperties':
        if self._properties is None:
            self._properties = DocumentProperties(self.context, _createPropertyObjectPath(self.context, self, "Properties", False, False))
        return self._properties
    @property
    def sections(self) -> 'SectionCollection':
        if self._sections is None:
            self._sections = SectionCollection(self.context, _createPropertyObjectPath(self.context, self, "Sections", True, False))
        return self._sections

    @property
    def saved(self) -> 'bool':
        _throwIfNotLoaded("saved", self._saved)
        return self._saved
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def getSelection(self) -> 'Range':
    	# Begin_PlaceHolder_Document_GetSelection
    	# End_PlaceHolder_Document_GetSelection
        return Range(self.context, _createMethodObjectPath(self.context, self, "GetSelection", OfficeExtension.OperationType.Read, [], False, True))

    def open(self) -> None:
    	# Begin_PlaceHolder_Document_Open
    	# End_PlaceHolder_Document_Open
        _createMethodAction(self.context, self, "Open", OfficeExtension.OperationType.Read, [])

    def save(self) -> None:
    	# Begin_PlaceHolder_Document_Save
    	# End_PlaceHolder_Document_Save
        _createMethodAction(self.context, self, "Save", OfficeExtension.OperationType.Default, [])

    def _GetObjectByReferenceId(self, referenceId : 'str') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Document__GetObjectByReferenceId
        # End_PlaceHolder_Document__GetObjectByReferenceId
        action = _createMethodAction(self.context, self, "_GetObjectByReferenceId", OfficeExtension.OperationType.Read, [referenceId])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        return ret

    def _GetObjectTypeNameByReferenceId(self, referenceId : 'str') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Document__GetObjectTypeNameByReferenceId
        # End_PlaceHolder_Document__GetObjectTypeNameByReferenceId
        action = _createMethodAction(self.context, self, "_GetObjectTypeNameByReferenceId", OfficeExtension.OperationType.Read, [referenceId])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        return ret

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_Document__KeepReference
    	# End_PlaceHolder_Document__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    def _RemoveAllReferences(self) -> None:
    	# Begin_PlaceHolder_Document__RemoveAllReferences
    	# End_PlaceHolder_Document__RemoveAllReferences
        _createMethodAction(self.context, self, "_RemoveAllReferences", OfficeExtension.OperationType.Read, [])

    def _RemoveReference(self, referenceId : 'str') -> None:
    	# Begin_PlaceHolder_Document__RemoveReference
    	# End_PlaceHolder_Document__RemoveReference
        _createMethodAction(self.context, self, "_RemoveReference", OfficeExtension.OperationType.Read, [referenceId])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("Saved")):
            self._saved = obj.get("Saved")
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isUndefined(obj.get("Body")):
            self.body._handleResult(obj.get("Body"))
        if not _isUndefined(obj.get("ContentControls")):
            self.contentControls._handleResult(obj.get("ContentControls"))
        if not _isUndefined(obj.get("Properties")):
            self.properties._handleResult(obj.get("Properties"))
        if not _isUndefined(obj.get("Sections")):
            self.sections._handleResult(obj.get("Sections"))
    
    def load(self, option = None) -> 'Document':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class DocumentProperties(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_DocumentProperties_Custom_Members
    # End_PlaceHolder_DocumentProperties_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._applicationName = None
        self._author = None
        self._category = None
        self._comments = None
        self._company = None
        self._creationDate = None
        self._customProperties = None
        self._format = None
        self._keywords = None
        self._lastAuthor = None
        self._lastPrintDate = None
        self._lastSaveTime = None
        self._manager = None
        self._revisionNumber = None
        self._security = None
        self._subject = None
        self._template = None
        self._title = None
        self.__ReferenceId = None

    @property
    def customProperties(self) -> 'CustomPropertyCollection':
        if self._customProperties is None:
            self._customProperties = CustomPropertyCollection(self.context, _createPropertyObjectPath(self.context, self, "CustomProperties", True, False))
        return self._customProperties

    @property
    def applicationName(self) -> 'str':
        _throwIfNotLoaded("applicationName", self._applicationName)
        return self._applicationName
    

    @property
    def author(self) -> 'str':
        _throwIfNotLoaded("author", self._author)
        return self._author
    

    @author.setter
    def author(self, value : 'str'):
        self._author = value
        _createSetPropertyAction(self.context, self, "Author", value)
    

    @property
    def category(self) -> 'str':
        _throwIfNotLoaded("category", self._category)
        return self._category
    

    @category.setter
    def category(self, value : 'str'):
        self._category = value
        _createSetPropertyAction(self.context, self, "Category", value)
    

    @property
    def comments(self) -> 'str':
        _throwIfNotLoaded("comments", self._comments)
        return self._comments
    

    @comments.setter
    def comments(self, value : 'str'):
        self._comments = value
        _createSetPropertyAction(self.context, self, "Comments", value)
    

    @property
    def company(self) -> 'str':
        _throwIfNotLoaded("company", self._company)
        return self._company
    

    @company.setter
    def company(self, value : 'str'):
        self._company = value
        _createSetPropertyAction(self.context, self, "Company", value)
    

    @property
    def creationDate(self) -> 'str':
        _throwIfNotLoaded("creationDate", self._creationDate)
        return self._creationDate
    

    @property
    def format(self) -> 'str':
        _throwIfNotLoaded("format", self._format)
        return self._format
    

    @format.setter
    def format(self, value : 'str'):
        self._format = value
        _createSetPropertyAction(self.context, self, "Format", value)
    

    @property
    def keywords(self) -> 'str':
        _throwIfNotLoaded("keywords", self._keywords)
        return self._keywords
    

    @keywords.setter
    def keywords(self, value : 'str'):
        self._keywords = value
        _createSetPropertyAction(self.context, self, "Keywords", value)
    

    @property
    def lastAuthor(self) -> 'str':
        _throwIfNotLoaded("lastAuthor", self._lastAuthor)
        return self._lastAuthor
    

    @lastAuthor.setter
    def lastAuthor(self, value : 'str'):
        self._lastAuthor = value
        _createSetPropertyAction(self.context, self, "LastAuthor", value)
    

    @property
    def lastPrintDate(self) -> 'str':
        _throwIfNotLoaded("lastPrintDate", self._lastPrintDate)
        return self._lastPrintDate
    

    @property
    def lastSaveTime(self) -> 'str':
        _throwIfNotLoaded("lastSaveTime", self._lastSaveTime)
        return self._lastSaveTime
    

    @property
    def manager(self) -> 'str':
        _throwIfNotLoaded("manager", self._manager)
        return self._manager
    

    @manager.setter
    def manager(self, value : 'str'):
        self._manager = value
        _createSetPropertyAction(self.context, self, "Manager", value)
    

    @property
    def revisionNumber(self) -> 'str':
        _throwIfNotLoaded("revisionNumber", self._revisionNumber)
        return self._revisionNumber
    

    @property
    def security(self) -> 'int':
        _throwIfNotLoaded("security", self._security)
        return self._security
    

    @property
    def subject(self) -> 'str':
        _throwIfNotLoaded("subject", self._subject)
        return self._subject
    

    @subject.setter
    def subject(self, value : 'str'):
        self._subject = value
        _createSetPropertyAction(self.context, self, "Subject", value)
    

    @property
    def template(self) -> 'str':
        _throwIfNotLoaded("template", self._template)
        return self._template
    

    @property
    def title(self) -> 'str':
        _throwIfNotLoaded("title", self._title)
        return self._title
    

    @title.setter
    def title(self, value : 'str'):
        self._title = value
        _createSetPropertyAction(self.context, self, "Title", value)
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_DocumentProperties__KeepReference
    	# End_PlaceHolder_DocumentProperties__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("ApplicationName")):
            self._applicationName = obj.get("ApplicationName")
        if not _isUndefined(obj.get("Author")):
            self._author = obj.get("Author")
        if not _isUndefined(obj.get("Category")):
            self._category = obj.get("Category")
        if not _isUndefined(obj.get("Comments")):
            self._comments = obj.get("Comments")
        if not _isUndefined(obj.get("Company")):
            self._company = obj.get("Company")
        if not _isUndefined(obj.get("CreationDate")):
            self._creationDate = obj.get("CreationDate")
        if not _isUndefined(obj.get("Format")):
            self._format = obj.get("Format")
        if not _isUndefined(obj.get("Keywords")):
            self._keywords = obj.get("Keywords")
        if not _isUndefined(obj.get("LastAuthor")):
            self._lastAuthor = obj.get("LastAuthor")
        if not _isUndefined(obj.get("LastPrintDate")):
            self._lastPrintDate = obj.get("LastPrintDate")
        if not _isUndefined(obj.get("LastSaveTime")):
            self._lastSaveTime = obj.get("LastSaveTime")
        if not _isUndefined(obj.get("Manager")):
            self._manager = obj.get("Manager")
        if not _isUndefined(obj.get("RevisionNumber")):
            self._revisionNumber = obj.get("RevisionNumber")
        if not _isUndefined(obj.get("Security")):
            self._security = obj.get("Security")
        if not _isUndefined(obj.get("Subject")):
            self._subject = obj.get("Subject")
        if not _isUndefined(obj.get("Template")):
            self._template = obj.get("Template")
        if not _isUndefined(obj.get("Title")):
            self._title = obj.get("Title")
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isUndefined(obj.get("CustomProperties")):
            self.customProperties._handleResult(obj.get("CustomProperties"))
    
    def load(self, option = None) -> 'DocumentProperties':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class Font(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_Font_Custom_Members
    # End_PlaceHolder_Font_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._bold = None
        self._color = None
        self._doubleStrikeThrough = None
        self._highlightColor = None
        self._italic = None
        self._name = None
        self._size = None
        self._strikeThrough = None
        self._subscript = None
        self._superscript = None
        self._underline = None
        self.__ReferenceId = None


    @property
    def bold(self) -> 'bool':
        _throwIfNotLoaded("bold", self._bold)
        return self._bold
    

    @bold.setter
    def bold(self, value : 'bool'):
        self._bold = value
        _createSetPropertyAction(self.context, self, "Bold", value)
    

    @property
    def color(self) -> 'str':
        _throwIfNotLoaded("color", self._color)
        return self._color
    

    @color.setter
    def color(self, value : 'str'):
        self._color = value
        _createSetPropertyAction(self.context, self, "Color", value)
    

    @property
    def doubleStrikeThrough(self) -> 'bool':
        _throwIfNotLoaded("doubleStrikeThrough", self._doubleStrikeThrough)
        return self._doubleStrikeThrough
    

    @doubleStrikeThrough.setter
    def doubleStrikeThrough(self, value : 'bool'):
        self._doubleStrikeThrough = value
        _createSetPropertyAction(self.context, self, "DoubleStrikeThrough", value)
    

    @property
    def highlightColor(self) -> 'str':
        _throwIfNotLoaded("highlightColor", self._highlightColor)
        return self._highlightColor
    

    @highlightColor.setter
    def highlightColor(self, value : 'str'):
        self._highlightColor = value
        _createSetPropertyAction(self.context, self, "HighlightColor", value)
    

    @property
    def italic(self) -> 'bool':
        _throwIfNotLoaded("italic", self._italic)
        return self._italic
    

    @italic.setter
    def italic(self, value : 'bool'):
        self._italic = value
        _createSetPropertyAction(self.context, self, "Italic", value)
    

    @property
    def name(self) -> 'str':
        _throwIfNotLoaded("name", self._name)
        return self._name
    

    @name.setter
    def name(self, value : 'str'):
        self._name = value
        _createSetPropertyAction(self.context, self, "Name", value)
    

    @property
    def size(self) -> 'float':
        _throwIfNotLoaded("size", self._size)
        return self._size
    

    @size.setter
    def size(self, value : 'float'):
        self._size = value
        _createSetPropertyAction(self.context, self, "Size", value)
    

    @property
    def strikeThrough(self) -> 'bool':
        _throwIfNotLoaded("strikeThrough", self._strikeThrough)
        return self._strikeThrough
    

    @strikeThrough.setter
    def strikeThrough(self, value : 'bool'):
        self._strikeThrough = value
        _createSetPropertyAction(self.context, self, "StrikeThrough", value)
    

    @property
    def subscript(self) -> 'bool':
        _throwIfNotLoaded("subscript", self._subscript)
        return self._subscript
    

    @subscript.setter
    def subscript(self, value : 'bool'):
        self._subscript = value
        _createSetPropertyAction(self.context, self, "Subscript", value)
    

    @property
    def superscript(self) -> 'bool':
        _throwIfNotLoaded("superscript", self._superscript)
        return self._superscript
    

    @superscript.setter
    def superscript(self, value : 'bool'):
        self._superscript = value
        _createSetPropertyAction(self.context, self, "Superscript", value)
    

    @property
    def underline(self) -> 'str':
        _throwIfNotLoaded("underline", self._underline)
        return self._underline
    

    @underline.setter
    def underline(self, value : 'str'):
        self._underline = value
        _createSetPropertyAction(self.context, self, "Underline", value)
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_Font__KeepReference
    	# End_PlaceHolder_Font__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("Bold")):
            self._bold = obj.get("Bold")
        if not _isUndefined(obj.get("Color")):
            self._color = obj.get("Color")
        if not _isUndefined(obj.get("DoubleStrikeThrough")):
            self._doubleStrikeThrough = obj.get("DoubleStrikeThrough")
        if not _isUndefined(obj.get("HighlightColor")):
            self._highlightColor = obj.get("HighlightColor")
        if not _isUndefined(obj.get("Italic")):
            self._italic = obj.get("Italic")
        if not _isUndefined(obj.get("Name")):
            self._name = obj.get("Name")
        if not _isUndefined(obj.get("Size")):
            self._size = obj.get("Size")
        if not _isUndefined(obj.get("StrikeThrough")):
            self._strikeThrough = obj.get("StrikeThrough")
        if not _isUndefined(obj.get("Subscript")):
            self._subscript = obj.get("Subscript")
        if not _isUndefined(obj.get("Superscript")):
            self._superscript = obj.get("Superscript")
        if not _isUndefined(obj.get("Underline")):
            self._underline = obj.get("Underline")
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
    
    def load(self, option = None) -> 'Font':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class InlinePicture(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_InlinePicture_Custom_Members
    # End_PlaceHolder_InlinePicture_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._altTextDescription = None
        self._altTextTitle = None
        self._height = None
        self._hyperlink = None
        self._lockAspectRatio = None
        self._paragraph = None
        self._parentContentControl = None
        self._parentTable = None
        self._parentTableCell = None
        self._width = None
        self.__Id = None
        self.__ReferenceId = None

    @property
    def paragraph(self) -> 'Paragraph':
        if self._paragraph is None:
            self._paragraph = Paragraph(self.context, _createPropertyObjectPath(self.context, self, "Paragraph", False, False))
        return self._paragraph
    @property
    def parentContentControl(self) -> 'ContentControl':
        if self._parentContentControl is None:
            self._parentContentControl = ContentControl(self.context, _createPropertyObjectPath(self.context, self, "ParentContentControl", False, False))
        return self._parentContentControl
    @property
    def parentTable(self) -> 'Table':
        if self._parentTable is None:
            self._parentTable = Table(self.context, _createPropertyObjectPath(self.context, self, "ParentTable", False, False))
        return self._parentTable
    @property
    def parentTableCell(self) -> 'TableCell':
        if self._parentTableCell is None:
            self._parentTableCell = TableCell(self.context, _createPropertyObjectPath(self.context, self, "ParentTableCell", False, False))
        return self._parentTableCell

    @property
    def altTextDescription(self) -> 'str':
        _throwIfNotLoaded("altTextDescription", self._altTextDescription)
        return self._altTextDescription
    

    @altTextDescription.setter
    def altTextDescription(self, value : 'str'):
        self._altTextDescription = value
        _createSetPropertyAction(self.context, self, "AltTextDescription", value)
    

    @property
    def altTextTitle(self) -> 'str':
        _throwIfNotLoaded("altTextTitle", self._altTextTitle)
        return self._altTextTitle
    

    @altTextTitle.setter
    def altTextTitle(self, value : 'str'):
        self._altTextTitle = value
        _createSetPropertyAction(self.context, self, "AltTextTitle", value)
    

    @property
    def height(self) -> 'float':
        _throwIfNotLoaded("height", self._height)
        return self._height
    

    @height.setter
    def height(self, value : 'float'):
        self._height = value
        _createSetPropertyAction(self.context, self, "Height", value)
    

    @property
    def hyperlink(self) -> 'str':
        _throwIfNotLoaded("hyperlink", self._hyperlink)
        return self._hyperlink
    

    @hyperlink.setter
    def hyperlink(self, value : 'str'):
        self._hyperlink = value
        _createSetPropertyAction(self.context, self, "Hyperlink", value)
    

    @property
    def lockAspectRatio(self) -> 'bool':
        _throwIfNotLoaded("lockAspectRatio", self._lockAspectRatio)
        return self._lockAspectRatio
    

    @lockAspectRatio.setter
    def lockAspectRatio(self, value : 'bool'):
        self._lockAspectRatio = value
        _createSetPropertyAction(self.context, self, "LockAspectRatio", value)
    

    @property
    def width(self) -> 'float':
        _throwIfNotLoaded("width", self._width)
        return self._width
    

    @width.setter
    def width(self, value : 'float'):
        self._width = value
        _createSetPropertyAction(self.context, self, "Width", value)
    

    @property
    def _Id(self) -> 'int':
        _throwIfNotLoaded("_Id", self.__Id)
        return self.__Id
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def delete(self) -> None:
    	# Begin_PlaceHolder_InlinePicture_Delete
    	# End_PlaceHolder_InlinePicture_Delete
        _createMethodAction(self.context, self, "Delete", OfficeExtension.OperationType.Default, [])

    def getBase64ImageSrc(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_InlinePicture_GetBase64ImageSrc
        # End_PlaceHolder_InlinePicture_GetBase64ImageSrc
        action = _createMethodAction(self.context, self, "GetBase64ImageSrc", OfficeExtension.OperationType.Read, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        return ret

    def getNext(self) -> 'InlinePicture':
    	# Begin_PlaceHolder_InlinePicture_GetNext
    	# End_PlaceHolder_InlinePicture_GetNext
        return InlinePicture(self.context, _createMethodObjectPath(self.context, self, "GetNext", OfficeExtension.OperationType.Read, [], False, False))

    def getRange(self, rangeLocation : 'str' = None) -> 'Range':
    	# Begin_PlaceHolder_InlinePicture_GetRange
    	# End_PlaceHolder_InlinePicture_GetRange
        return Range(self.context, _createMethodObjectPath(self.context, self, "GetRange", OfficeExtension.OperationType.Read, [rangeLocation], False, False))

    def insertBreak(self, breakType : 'str', insertLocation : 'str') -> None:
    	# Begin_PlaceHolder_InlinePicture_InsertBreak
    	# End_PlaceHolder_InlinePicture_InsertBreak
        _createMethodAction(self.context, self, "InsertBreak", OfficeExtension.OperationType.Default, [breakType, insertLocation])

    def insertContentControl(self) -> 'ContentControl':
    	# Begin_PlaceHolder_InlinePicture_InsertContentControl
    	# End_PlaceHolder_InlinePicture_InsertContentControl
        return ContentControl(self.context, _createMethodObjectPath(self.context, self, "InsertContentControl", OfficeExtension.OperationType.Default, [], False, True))

    def insertFileFromBase64(self, base64File : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_InlinePicture_InsertFileFromBase64
    	# End_PlaceHolder_InlinePicture_InsertFileFromBase64
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertFileFromBase64", OfficeExtension.OperationType.Default, [base64File, insertLocation], False, True))

    def insertHtml(self, html : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_InlinePicture_InsertHtml
    	# End_PlaceHolder_InlinePicture_InsertHtml
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertHtml", OfficeExtension.OperationType.Default, [html, insertLocation], False, True))

    def insertInlinePictureFromBase64(self, base64EncodedImage : 'str', insertLocation : 'str') -> 'InlinePicture':
    	# Begin_PlaceHolder_InlinePicture_InsertInlinePictureFromBase64
    	# End_PlaceHolder_InlinePicture_InsertInlinePictureFromBase64
        return InlinePicture(self.context, _createMethodObjectPath(self.context, self, "InsertInlinePictureFromBase64", OfficeExtension.OperationType.Default, [base64EncodedImage, insertLocation], False, True))

    def insertOoxml(self, ooxml : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_InlinePicture_InsertOoxml
    	# End_PlaceHolder_InlinePicture_InsertOoxml
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertOoxml", OfficeExtension.OperationType.Default, [ooxml, insertLocation], False, True))

    def insertParagraph(self, paragraphText : 'str', insertLocation : 'str') -> 'Paragraph':
    	# Begin_PlaceHolder_InlinePicture_InsertParagraph
    	# End_PlaceHolder_InlinePicture_InsertParagraph
        return Paragraph(self.context, _createMethodObjectPath(self.context, self, "InsertParagraph", OfficeExtension.OperationType.Default, [paragraphText, insertLocation], False, True))

    def insertText(self, text : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_InlinePicture_InsertText
    	# End_PlaceHolder_InlinePicture_InsertText
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertText", OfficeExtension.OperationType.Default, [text, insertLocation], False, True))

    def select(self, selectionMode : 'str' = None) -> None:
    	# Begin_PlaceHolder_InlinePicture_Select
    	# End_PlaceHolder_InlinePicture_Select
        _createMethodAction(self.context, self, "Select", OfficeExtension.OperationType.Read, [selectionMode])

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_InlinePicture__KeepReference
    	# End_PlaceHolder_InlinePicture__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("AltTextDescription")):
            self._altTextDescription = obj.get("AltTextDescription")
        if not _isUndefined(obj.get("AltTextTitle")):
            self._altTextTitle = obj.get("AltTextTitle")
        if not _isUndefined(obj.get("Height")):
            self._height = obj.get("Height")
        if not _isUndefined(obj.get("Hyperlink")):
            self._hyperlink = obj.get("Hyperlink")
        if not _isUndefined(obj.get("LockAspectRatio")):
            self._lockAspectRatio = obj.get("LockAspectRatio")
        if not _isUndefined(obj.get("Width")):
            self._width = obj.get("Width")
        if not _isUndefined(obj.get("_Id")):
            self.__Id = obj.get("_Id")
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isUndefined(obj.get("Paragraph")):
            self.paragraph._handleResult(obj.get("Paragraph"))
        if not _isUndefined(obj.get("ParentContentControl")):
            self.parentContentControl._handleResult(obj.get("ParentContentControl"))
        if not _isUndefined(obj.get("ParentTable")):
            self.parentTable._handleResult(obj.get("ParentTable"))
        if not _isUndefined(obj.get("ParentTableCell")):
            self.parentTableCell._handleResult(obj.get("ParentTableCell"))
    
    def load(self, option = None) -> 'InlinePicture':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class InlinePictureCollection(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_InlinePictureCollection_Custom_Members
    # End_PlaceHolder_InlinePictureCollection_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self.__ReferenceId = None
        self.__items = None

    
    @property
    def items(self) -> 'list of InlinePicture':
        _throwIfNotLoaded("items", self.__items)
        return self.__items
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def getFirst(self) -> 'InlinePicture':
    	# Begin_PlaceHolder_InlinePictureCollection_GetFirst
    	# End_PlaceHolder_InlinePictureCollection_GetFirst
        return InlinePicture(self.context, _createMethodObjectPath(self.context, self, "GetFirst", OfficeExtension.OperationType.Read, [], False, False))

    def _GetItem(self, index : 'any') -> 'InlinePicture':
    	# Begin_PlaceHolder_InlinePictureCollection__GetItem
    	# End_PlaceHolder_InlinePictureCollection__GetItem
        return InlinePicture(self.context, _createIndexerObjectPath(self.context, self, [index]))

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_InlinePictureCollection__KeepReference
    	# End_PlaceHolder_InlinePictureCollection__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isNullOrUndefined(obj.get(OfficeExtension.Constants.items)):
            self.__items = []
            data = obj.get(OfficeExtension.Constants.items)
            for i, itemData in enumerate(data):
                item = InlinePicture(self.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(True, self.context, self, itemData, i))
                item._handleResult(itemData)
                self.__items.append(item)
    
    def load(self, option = None) -> 'InlinePictureCollection':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class List(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_List_Custom_Members
    # End_PlaceHolder_List_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._id = None
        self._levelExistences = None
        self._levelTypes = None
        self._paragraphs = None
        self.__ReferenceId = None

    @property
    def paragraphs(self) -> 'ParagraphCollection':
        if self._paragraphs is None:
            self._paragraphs = ParagraphCollection(self.context, _createPropertyObjectPath(self.context, self, "Paragraphs", True, False))
        return self._paragraphs

    @property
    def id(self) -> 'int':
        _throwIfNotLoaded("id", self._id)
        return self._id
    

    @property
    def levelExistences(self) -> 'list':
        _throwIfNotLoaded("levelExistences", self._levelExistences)
        return self._levelExistences
    

    @property
    def levelTypes(self) -> 'list':
        _throwIfNotLoaded("levelTypes", self._levelTypes)
        return self._levelTypes
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def getLevelParagraphs(self, level : 'int') -> 'ParagraphCollection':
    	# Begin_PlaceHolder_List_GetLevelParagraphs
    	# End_PlaceHolder_List_GetLevelParagraphs
        return ParagraphCollection(self.context, _createMethodObjectPath(self.context, self, "GetLevelParagraphs", OfficeExtension.OperationType.Read, [level], True, False))

    def getLevelString(self, level : 'int') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_List_GetLevelString
        # End_PlaceHolder_List_GetLevelString
        action = _createMethodAction(self.context, self, "GetLevelString", OfficeExtension.OperationType.Read, [level])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        return ret

    def insertParagraph(self, paragraphText : 'str', insertLocation : 'str') -> 'Paragraph':
    	# Begin_PlaceHolder_List_InsertParagraph
    	# End_PlaceHolder_List_InsertParagraph
        return Paragraph(self.context, _createMethodObjectPath(self.context, self, "InsertParagraph", OfficeExtension.OperationType.Default, [paragraphText, insertLocation], False, True))

    def setLevelAlignment(self, level : 'int', alignment : 'str') -> None:
    	# Begin_PlaceHolder_List_SetLevelAlignment
    	# End_PlaceHolder_List_SetLevelAlignment
        _createMethodAction(self.context, self, "SetLevelAlignment", OfficeExtension.OperationType.Default, [level, alignment])

    def setLevelBullet(self, level : 'int', listBullet : 'str', charCode : 'int' = None, fontName : 'str' = None) -> None:
    	# Begin_PlaceHolder_List_SetLevelBullet
    	# End_PlaceHolder_List_SetLevelBullet
        _createMethodAction(self.context, self, "SetLevelBullet", OfficeExtension.OperationType.Default, [level, listBullet, charCode, fontName])

    def setLevelIndents(self, level : 'int', textIndent : 'float', bulletNumberPictureIndent : 'float') -> None:
    	# Begin_PlaceHolder_List_SetLevelIndents
    	# End_PlaceHolder_List_SetLevelIndents
        _createMethodAction(self.context, self, "SetLevelIndents", OfficeExtension.OperationType.Default, [level, textIndent, bulletNumberPictureIndent])

    def setLevelNumbering(self, level : 'int', listNumbering : 'str', formatString : 'list' = None) -> None:
    	# Begin_PlaceHolder_List_SetLevelNumbering
    	# End_PlaceHolder_List_SetLevelNumbering
        _createMethodAction(self.context, self, "SetLevelNumbering", OfficeExtension.OperationType.Default, [level, listNumbering, formatString])

    def setLevelStartingNumber(self, level : 'int', startingNumber : 'int') -> None:
    	# Begin_PlaceHolder_List_SetLevelStartingNumber
    	# End_PlaceHolder_List_SetLevelStartingNumber
        _createMethodAction(self.context, self, "SetLevelStartingNumber", OfficeExtension.OperationType.Default, [level, startingNumber])

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_List__KeepReference
    	# End_PlaceHolder_List__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("Id")):
            self._id = obj.get("Id")
        if not _isUndefined(obj.get("LevelExistences")):
            self._levelExistences = obj.get("LevelExistences")
        if not _isUndefined(obj.get("LevelTypes")):
            self._levelTypes = obj.get("LevelTypes")
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isUndefined(obj.get("Paragraphs")):
            self.paragraphs._handleResult(obj.get("Paragraphs"))
    
    def load(self, option = None) -> 'List':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class ListCollection(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_ListCollection_Custom_Members
    # End_PlaceHolder_ListCollection_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self.__ReferenceId = None
        self.__items = None

    
    @property
    def items(self) -> 'list of List':
        _throwIfNotLoaded("items", self.__items)
        return self.__items
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def getById(self, id : 'int') -> 'List':
    	# Begin_PlaceHolder_ListCollection_GetById
    	# End_PlaceHolder_ListCollection_GetById
        return List(self.context, _createMethodObjectPath(self.context, self, "GetById", OfficeExtension.OperationType.Read, [id], False, False))

    def getFirst(self) -> 'List':
    	# Begin_PlaceHolder_ListCollection_GetFirst
    	# End_PlaceHolder_ListCollection_GetFirst
        return List(self.context, _createMethodObjectPath(self.context, self, "GetFirst", OfficeExtension.OperationType.Read, [], False, False))

    def getItem(self, index : 'any') -> 'List':
    	# Begin_PlaceHolder_ListCollection_GetItem
    	# End_PlaceHolder_ListCollection_GetItem
        return List(self.context, _createIndexerObjectPath(self.context, self, [index]))

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_ListCollection__KeepReference
    	# End_PlaceHolder_ListCollection__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isNullOrUndefined(obj.get(OfficeExtension.Constants.items)):
            self.__items = []
            data = obj.get(OfficeExtension.Constants.items)
            for i, itemData in enumerate(data):
                item = List(self.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(True, self.context, self, itemData, i))
                item._handleResult(itemData)
                self.__items.append(item)
    
    def load(self, option = None) -> 'ListCollection':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class ListItem(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_ListItem_Custom_Members
    # End_PlaceHolder_ListItem_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._level = None
        self._listString = None
        self._siblingIndex = None
        self.__ReferenceId = None


    @property
    def level(self) -> 'int':
        _throwIfNotLoaded("level", self._level)
        return self._level
    

    @level.setter
    def level(self, value : 'int'):
        self._level = value
        _createSetPropertyAction(self.context, self, "Level", value)
    

    @property
    def listString(self) -> 'str':
        _throwIfNotLoaded("listString", self._listString)
        return self._listString
    

    @property
    def siblingIndex(self) -> 'int':
        _throwIfNotLoaded("siblingIndex", self._siblingIndex)
        return self._siblingIndex
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def getAncestor(self, parentOnly : 'bool' = None) -> 'Paragraph':
    	# Begin_PlaceHolder_ListItem_GetAncestor
    	# End_PlaceHolder_ListItem_GetAncestor
        return Paragraph(self.context, _createMethodObjectPath(self.context, self, "GetAncestor", OfficeExtension.OperationType.Read, [parentOnly], False, False))

    def getDescendants(self, directChildrenOnly : 'bool' = None) -> 'ParagraphCollection':
    	# Begin_PlaceHolder_ListItem_GetDescendants
    	# End_PlaceHolder_ListItem_GetDescendants
        return ParagraphCollection(self.context, _createMethodObjectPath(self.context, self, "GetDescendants", OfficeExtension.OperationType.Read, [directChildrenOnly], True, False))

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_ListItem__KeepReference
    	# End_PlaceHolder_ListItem__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("Level")):
            self._level = obj.get("Level")
        if not _isUndefined(obj.get("ListString")):
            self._listString = obj.get("ListString")
        if not _isUndefined(obj.get("SiblingIndex")):
            self._siblingIndex = obj.get("SiblingIndex")
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
    
    def load(self, option = None) -> 'ListItem':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class Paragraph(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_Paragraph_Custom_Members
    # End_PlaceHolder_Paragraph_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._alignment = None
        self._contentControls = None
        self._firstLineIndent = None
        self._font = None
        self._inlinePictures = None
        self._isLastParagraph = None
        self._isListItem = None
        self._leftIndent = None
        self._lineSpacing = None
        self._lineUnitAfter = None
        self._lineUnitBefore = None
        self._list = None
        self._listItem = None
        self._outlineLevel = None
        self._parentBody = None
        self._parentContentControl = None
        self._parentTable = None
        self._parentTableCell = None
        self._rightIndent = None
        self._spaceAfter = None
        self._spaceBefore = None
        self._style = None
        self._styleBuiltIn = None
        self._tableNestingLevel = None
        self._text = None
        self.__Id = None
        self.__ReferenceId = None

    @property
    def contentControls(self) -> 'ContentControlCollection':
        if self._contentControls is None:
            self._contentControls = ContentControlCollection(self.context, _createPropertyObjectPath(self.context, self, "ContentControls", True, False))
        return self._contentControls
    @property
    def font(self) -> 'Font':
        if self._font is None:
            self._font = Font(self.context, _createPropertyObjectPath(self.context, self, "Font", False, False))
        return self._font
    @property
    def inlinePictures(self) -> 'InlinePictureCollection':
        if self._inlinePictures is None:
            self._inlinePictures = InlinePictureCollection(self.context, _createPropertyObjectPath(self.context, self, "InlinePictures", True, False))
        return self._inlinePictures
    @property
    def list(self) -> 'List':
        if self._list is None:
            self._list = List(self.context, _createPropertyObjectPath(self.context, self, "List", False, False))
        return self._list
    @property
    def listItem(self) -> 'ListItem':
        if self._listItem is None:
            self._listItem = ListItem(self.context, _createPropertyObjectPath(self.context, self, "ListItem", False, False))
        return self._listItem
    @property
    def parentBody(self) -> 'Body':
        if self._parentBody is None:
            self._parentBody = Body(self.context, _createPropertyObjectPath(self.context, self, "ParentBody", False, False))
        return self._parentBody
    @property
    def parentContentControl(self) -> 'ContentControl':
        if self._parentContentControl is None:
            self._parentContentControl = ContentControl(self.context, _createPropertyObjectPath(self.context, self, "ParentContentControl", False, False))
        return self._parentContentControl
    @property
    def parentTable(self) -> 'Table':
        if self._parentTable is None:
            self._parentTable = Table(self.context, _createPropertyObjectPath(self.context, self, "ParentTable", False, False))
        return self._parentTable
    @property
    def parentTableCell(self) -> 'TableCell':
        if self._parentTableCell is None:
            self._parentTableCell = TableCell(self.context, _createPropertyObjectPath(self.context, self, "ParentTableCell", False, False))
        return self._parentTableCell

    @property
    def alignment(self) -> 'str':
        _throwIfNotLoaded("alignment", self._alignment)
        return self._alignment
    

    @alignment.setter
    def alignment(self, value : 'str'):
        self._alignment = value
        _createSetPropertyAction(self.context, self, "Alignment", value)
    

    @property
    def firstLineIndent(self) -> 'float':
        _throwIfNotLoaded("firstLineIndent", self._firstLineIndent)
        return self._firstLineIndent
    

    @firstLineIndent.setter
    def firstLineIndent(self, value : 'float'):
        self._firstLineIndent = value
        _createSetPropertyAction(self.context, self, "FirstLineIndent", value)
    

    @property
    def isLastParagraph(self) -> 'bool':
        _throwIfNotLoaded("isLastParagraph", self._isLastParagraph)
        return self._isLastParagraph
    

    @property
    def isListItem(self) -> 'bool':
        _throwIfNotLoaded("isListItem", self._isListItem)
        return self._isListItem
    

    @property
    def leftIndent(self) -> 'float':
        _throwIfNotLoaded("leftIndent", self._leftIndent)
        return self._leftIndent
    

    @leftIndent.setter
    def leftIndent(self, value : 'float'):
        self._leftIndent = value
        _createSetPropertyAction(self.context, self, "LeftIndent", value)
    

    @property
    def lineSpacing(self) -> 'float':
        _throwIfNotLoaded("lineSpacing", self._lineSpacing)
        return self._lineSpacing
    

    @lineSpacing.setter
    def lineSpacing(self, value : 'float'):
        self._lineSpacing = value
        _createSetPropertyAction(self.context, self, "LineSpacing", value)
    

    @property
    def lineUnitAfter(self) -> 'float':
        _throwIfNotLoaded("lineUnitAfter", self._lineUnitAfter)
        return self._lineUnitAfter
    

    @lineUnitAfter.setter
    def lineUnitAfter(self, value : 'float'):
        self._lineUnitAfter = value
        _createSetPropertyAction(self.context, self, "LineUnitAfter", value)
    

    @property
    def lineUnitBefore(self) -> 'float':
        _throwIfNotLoaded("lineUnitBefore", self._lineUnitBefore)
        return self._lineUnitBefore
    

    @lineUnitBefore.setter
    def lineUnitBefore(self, value : 'float'):
        self._lineUnitBefore = value
        _createSetPropertyAction(self.context, self, "LineUnitBefore", value)
    

    @property
    def outlineLevel(self) -> 'int':
        _throwIfNotLoaded("outlineLevel", self._outlineLevel)
        return self._outlineLevel
    

    @outlineLevel.setter
    def outlineLevel(self, value : 'int'):
        self._outlineLevel = value
        _createSetPropertyAction(self.context, self, "OutlineLevel", value)
    

    @property
    def rightIndent(self) -> 'float':
        _throwIfNotLoaded("rightIndent", self._rightIndent)
        return self._rightIndent
    

    @rightIndent.setter
    def rightIndent(self, value : 'float'):
        self._rightIndent = value
        _createSetPropertyAction(self.context, self, "RightIndent", value)
    

    @property
    def spaceAfter(self) -> 'float':
        _throwIfNotLoaded("spaceAfter", self._spaceAfter)
        return self._spaceAfter
    

    @spaceAfter.setter
    def spaceAfter(self, value : 'float'):
        self._spaceAfter = value
        _createSetPropertyAction(self.context, self, "SpaceAfter", value)
    

    @property
    def spaceBefore(self) -> 'float':
        _throwIfNotLoaded("spaceBefore", self._spaceBefore)
        return self._spaceBefore
    

    @spaceBefore.setter
    def spaceBefore(self, value : 'float'):
        self._spaceBefore = value
        _createSetPropertyAction(self.context, self, "SpaceBefore", value)
    

    @property
    def style(self) -> 'str':
        _throwIfNotLoaded("style", self._style)
        return self._style
    

    @style.setter
    def style(self, value : 'str'):
        self._style = value
        _createSetPropertyAction(self.context, self, "Style", value)
    

    @property
    def styleBuiltIn(self) -> 'str':
        _throwIfNotLoaded("styleBuiltIn", self._styleBuiltIn)
        return self._styleBuiltIn
    

    @styleBuiltIn.setter
    def styleBuiltIn(self, value : 'str'):
        self._styleBuiltIn = value
        _createSetPropertyAction(self.context, self, "StyleBuiltIn", value)
    

    @property
    def tableNestingLevel(self) -> 'int':
        _throwIfNotLoaded("tableNestingLevel", self._tableNestingLevel)
        return self._tableNestingLevel
    

    @property
    def text(self) -> 'str':
        _throwIfNotLoaded("text", self._text)
        return self._text
    

    @property
    def _Id(self) -> 'int':
        _throwIfNotLoaded("_Id", self.__Id)
        return self.__Id
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def attachToList(self, listId : 'int', level : 'int') -> 'List':
    	# Begin_PlaceHolder_Paragraph_AttachToList
    	# End_PlaceHolder_Paragraph_AttachToList
        return List(self.context, _createMethodObjectPath(self.context, self, "AttachToList", OfficeExtension.OperationType.Default, [listId, level], False, False))

    def clear(self) -> None:
    	# Begin_PlaceHolder_Paragraph_Clear
    	# End_PlaceHolder_Paragraph_Clear
        _createMethodAction(self.context, self, "Clear", OfficeExtension.OperationType.Default, [])

    def delete(self) -> None:
    	# Begin_PlaceHolder_Paragraph_Delete
    	# End_PlaceHolder_Paragraph_Delete
        _createMethodAction(self.context, self, "Delete", OfficeExtension.OperationType.Default, [])

    def detachFromList(self) -> None:
    	# Begin_PlaceHolder_Paragraph_DetachFromList
    	# End_PlaceHolder_Paragraph_DetachFromList
        _createMethodAction(self.context, self, "DetachFromList", OfficeExtension.OperationType.Default, [])

    def getHtml(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Paragraph_GetHtml
        # End_PlaceHolder_Paragraph_GetHtml
        action = _createMethodAction(self.context, self, "GetHtml", OfficeExtension.OperationType.Read, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        return ret

    def getNext(self) -> 'Paragraph':
    	# Begin_PlaceHolder_Paragraph_GetNext
    	# End_PlaceHolder_Paragraph_GetNext
        return Paragraph(self.context, _createMethodObjectPath(self.context, self, "GetNext", OfficeExtension.OperationType.Read, [], False, False))

    def getOoxml(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Paragraph_GetOoxml
        # End_PlaceHolder_Paragraph_GetOoxml
        action = _createMethodAction(self.context, self, "GetOoxml", OfficeExtension.OperationType.Read, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        return ret

    def getPrevious(self) -> 'Paragraph':
    	# Begin_PlaceHolder_Paragraph_GetPrevious
    	# End_PlaceHolder_Paragraph_GetPrevious
        return Paragraph(self.context, _createMethodObjectPath(self.context, self, "GetPrevious", OfficeExtension.OperationType.Read, [], False, False))

    def getRange(self, rangeLocation : 'str' = None) -> 'Range':
    	# Begin_PlaceHolder_Paragraph_GetRange
    	# End_PlaceHolder_Paragraph_GetRange
        return Range(self.context, _createMethodObjectPath(self.context, self, "GetRange", OfficeExtension.OperationType.Read, [rangeLocation], False, False))

    def getTextRanges(self, endingMarks : 'list', trimSpacing : 'bool' = None) -> 'RangeCollection':
    	# Begin_PlaceHolder_Paragraph_GetTextRanges
    	# End_PlaceHolder_Paragraph_GetTextRanges
        return RangeCollection(self.context, _createMethodObjectPath(self.context, self, "GetTextRanges", OfficeExtension.OperationType.Read, [endingMarks, trimSpacing], True, False))

    def insertBreak(self, breakType : 'str', insertLocation : 'str') -> None:
    	# Begin_PlaceHolder_Paragraph_InsertBreak
    	# End_PlaceHolder_Paragraph_InsertBreak
        _createMethodAction(self.context, self, "InsertBreak", OfficeExtension.OperationType.Default, [breakType, insertLocation])

    def insertContentControl(self) -> 'ContentControl':
    	# Begin_PlaceHolder_Paragraph_InsertContentControl
    	# End_PlaceHolder_Paragraph_InsertContentControl
        return ContentControl(self.context, _createMethodObjectPath(self.context, self, "InsertContentControl", OfficeExtension.OperationType.Default, [], False, True))

    def insertFileFromBase64(self, base64File : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_Paragraph_InsertFileFromBase64
    	# End_PlaceHolder_Paragraph_InsertFileFromBase64
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertFileFromBase64", OfficeExtension.OperationType.Default, [base64File, insertLocation], False, True))

    def insertHtml(self, html : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_Paragraph_InsertHtml
    	# End_PlaceHolder_Paragraph_InsertHtml
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertHtml", OfficeExtension.OperationType.Default, [html, insertLocation], False, True))

    def insertInlinePictureFromBase64(self, base64EncodedImage : 'str', insertLocation : 'str') -> 'InlinePicture':
    	# Begin_PlaceHolder_Paragraph_InsertInlinePictureFromBase64
    	# End_PlaceHolder_Paragraph_InsertInlinePictureFromBase64
        return InlinePicture(self.context, _createMethodObjectPath(self.context, self, "InsertInlinePictureFromBase64", OfficeExtension.OperationType.Default, [base64EncodedImage, insertLocation], False, True))

    def insertOoxml(self, ooxml : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_Paragraph_InsertOoxml
    	# End_PlaceHolder_Paragraph_InsertOoxml
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertOoxml", OfficeExtension.OperationType.Default, [ooxml, insertLocation], False, True))

    def insertParagraph(self, paragraphText : 'str', insertLocation : 'str') -> 'Paragraph':
    	# Begin_PlaceHolder_Paragraph_InsertParagraph
    	# End_PlaceHolder_Paragraph_InsertParagraph
        return Paragraph(self.context, _createMethodObjectPath(self.context, self, "InsertParagraph", OfficeExtension.OperationType.Default, [paragraphText, insertLocation], False, True))

    def insertTable(self, rowCount : 'int', columnCount : 'int', insertLocation : 'str', values : 'list' = None) -> 'Table':
    	# Begin_PlaceHolder_Paragraph_InsertTable
    	# End_PlaceHolder_Paragraph_InsertTable
        return Table(self.context, _createMethodObjectPath(self.context, self, "InsertTable", OfficeExtension.OperationType.Default, [rowCount, columnCount, insertLocation, values], False, True))

    def insertText(self, text : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_Paragraph_InsertText
    	# End_PlaceHolder_Paragraph_InsertText
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertText", OfficeExtension.OperationType.Default, [text, insertLocation], False, True))

    def search(self, searchText : 'str', searchOptions : 'SearchOptions' = None) -> 'RangeCollection':
    	# Begin_PlaceHolder_Paragraph_Search
    	# End_PlaceHolder_Paragraph_Search
        return RangeCollection(self.context, _createMethodObjectPath(self.context, self, "Search", OfficeExtension.OperationType.Read, [searchText, searchOptions], True, True))

    def select(self, selectionMode : 'str' = None) -> None:
    	# Begin_PlaceHolder_Paragraph_Select
    	# End_PlaceHolder_Paragraph_Select
        _createMethodAction(self.context, self, "Select", OfficeExtension.OperationType.Read, [selectionMode])

    def split(self, delimiters : 'list', trimDelimiters : 'bool' = None, trimSpacing : 'bool' = None) -> 'RangeCollection':
    	# Begin_PlaceHolder_Paragraph_Split
    	# End_PlaceHolder_Paragraph_Split
        return RangeCollection(self.context, _createMethodObjectPath(self.context, self, "Split", OfficeExtension.OperationType.Read, [delimiters, trimDelimiters, trimSpacing], True, False))

    def startNewList(self) -> 'List':
    	# Begin_PlaceHolder_Paragraph_StartNewList
    	# End_PlaceHolder_Paragraph_StartNewList
        return List(self.context, _createMethodObjectPath(self.context, self, "StartNewList", OfficeExtension.OperationType.Default, [], False, False))

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_Paragraph__KeepReference
    	# End_PlaceHolder_Paragraph__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("Alignment")):
            self._alignment = obj.get("Alignment")
        if not _isUndefined(obj.get("FirstLineIndent")):
            self._firstLineIndent = obj.get("FirstLineIndent")
        if not _isUndefined(obj.get("IsLastParagraph")):
            self._isLastParagraph = obj.get("IsLastParagraph")
        if not _isUndefined(obj.get("IsListItem")):
            self._isListItem = obj.get("IsListItem")
        if not _isUndefined(obj.get("LeftIndent")):
            self._leftIndent = obj.get("LeftIndent")
        if not _isUndefined(obj.get("LineSpacing")):
            self._lineSpacing = obj.get("LineSpacing")
        if not _isUndefined(obj.get("LineUnitAfter")):
            self._lineUnitAfter = obj.get("LineUnitAfter")
        if not _isUndefined(obj.get("LineUnitBefore")):
            self._lineUnitBefore = obj.get("LineUnitBefore")
        if not _isUndefined(obj.get("OutlineLevel")):
            self._outlineLevel = obj.get("OutlineLevel")
        if not _isUndefined(obj.get("RightIndent")):
            self._rightIndent = obj.get("RightIndent")
        if not _isUndefined(obj.get("SpaceAfter")):
            self._spaceAfter = obj.get("SpaceAfter")
        if not _isUndefined(obj.get("SpaceBefore")):
            self._spaceBefore = obj.get("SpaceBefore")
        if not _isUndefined(obj.get("Style")):
            self._style = obj.get("Style")
        if not _isUndefined(obj.get("StyleBuiltIn")):
            self._styleBuiltIn = obj.get("StyleBuiltIn")
        if not _isUndefined(obj.get("TableNestingLevel")):
            self._tableNestingLevel = obj.get("TableNestingLevel")
        if not _isUndefined(obj.get("Text")):
            self._text = obj.get("Text")
        if not _isUndefined(obj.get("_Id")):
            self.__Id = obj.get("_Id")
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isUndefined(obj.get("ContentControls")):
            self.contentControls._handleResult(obj.get("ContentControls"))
        if not _isUndefined(obj.get("Font")):
            self.font._handleResult(obj.get("Font"))
        if not _isUndefined(obj.get("InlinePictures")):
            self.inlinePictures._handleResult(obj.get("InlinePictures"))
        if not _isUndefined(obj.get("List")):
            self.list._handleResult(obj.get("List"))
        if not _isUndefined(obj.get("ListItem")):
            self.listItem._handleResult(obj.get("ListItem"))
        if not _isUndefined(obj.get("ParentBody")):
            self.parentBody._handleResult(obj.get("ParentBody"))
        if not _isUndefined(obj.get("ParentContentControl")):
            self.parentContentControl._handleResult(obj.get("ParentContentControl"))
        if not _isUndefined(obj.get("ParentTable")):
            self.parentTable._handleResult(obj.get("ParentTable"))
        if not _isUndefined(obj.get("ParentTableCell")):
            self.parentTableCell._handleResult(obj.get("ParentTableCell"))
    
    def load(self, option = None) -> 'Paragraph':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class ParagraphCollection(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_ParagraphCollection_Custom_Members
    # End_PlaceHolder_ParagraphCollection_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self.__ReferenceId = None
        self.__items = None

    
    @property
    def items(self) -> 'list of Paragraph':
        _throwIfNotLoaded("items", self.__items)
        return self.__items
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def getFirst(self) -> 'Paragraph':
    	# Begin_PlaceHolder_ParagraphCollection_GetFirst
    	# End_PlaceHolder_ParagraphCollection_GetFirst
        return Paragraph(self.context, _createMethodObjectPath(self.context, self, "GetFirst", OfficeExtension.OperationType.Read, [], False, False))

    def getLast(self) -> 'Paragraph':
    	# Begin_PlaceHolder_ParagraphCollection_GetLast
    	# End_PlaceHolder_ParagraphCollection_GetLast
        return Paragraph(self.context, _createMethodObjectPath(self.context, self, "GetLast", OfficeExtension.OperationType.Read, [], False, False))

    def _GetItem(self, index : 'any') -> 'Paragraph':
    	# Begin_PlaceHolder_ParagraphCollection__GetItem
    	# End_PlaceHolder_ParagraphCollection__GetItem
        return Paragraph(self.context, _createIndexerObjectPath(self.context, self, [index]))

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_ParagraphCollection__KeepReference
    	# End_PlaceHolder_ParagraphCollection__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isNullOrUndefined(obj.get(OfficeExtension.Constants.items)):
            self.__items = []
            data = obj.get(OfficeExtension.Constants.items)
            for i, itemData in enumerate(data):
                item = Paragraph(self.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(True, self.context, self, itemData, i))
                item._handleResult(itemData)
                self.__items.append(item)
    
    def load(self, option = None) -> 'ParagraphCollection':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class Range(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_Range_Custom_Members
    # End_PlaceHolder_Range_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._contentControls = None
        self._font = None
        self._hyperlink = None
        self._inlinePictures = None
        self._isEmpty = None
        self._lists = None
        self._paragraphs = None
        self._parentBody = None
        self._parentContentControl = None
        self._parentTable = None
        self._parentTableCell = None
        self._style = None
        self._styleBuiltIn = None
        self._tables = None
        self._text = None
        self.__Id = None
        self.__ReferenceId = None

    @property
    def contentControls(self) -> 'ContentControlCollection':
        if self._contentControls is None:
            self._contentControls = ContentControlCollection(self.context, _createPropertyObjectPath(self.context, self, "ContentControls", True, False))
        return self._contentControls
    @property
    def font(self) -> 'Font':
        if self._font is None:
            self._font = Font(self.context, _createPropertyObjectPath(self.context, self, "Font", False, False))
        return self._font
    @property
    def inlinePictures(self) -> 'InlinePictureCollection':
        if self._inlinePictures is None:
            self._inlinePictures = InlinePictureCollection(self.context, _createPropertyObjectPath(self.context, self, "InlinePictures", True, False))
        return self._inlinePictures
    @property
    def lists(self) -> 'ListCollection':
        if self._lists is None:
            self._lists = ListCollection(self.context, _createPropertyObjectPath(self.context, self, "Lists", True, False))
        return self._lists
    @property
    def paragraphs(self) -> 'ParagraphCollection':
        if self._paragraphs is None:
            self._paragraphs = ParagraphCollection(self.context, _createPropertyObjectPath(self.context, self, "Paragraphs", True, False))
        return self._paragraphs
    @property
    def parentBody(self) -> 'Body':
        if self._parentBody is None:
            self._parentBody = Body(self.context, _createPropertyObjectPath(self.context, self, "ParentBody", False, False))
        return self._parentBody
    @property
    def parentContentControl(self) -> 'ContentControl':
        if self._parentContentControl is None:
            self._parentContentControl = ContentControl(self.context, _createPropertyObjectPath(self.context, self, "ParentContentControl", False, False))
        return self._parentContentControl
    @property
    def parentTable(self) -> 'Table':
        if self._parentTable is None:
            self._parentTable = Table(self.context, _createPropertyObjectPath(self.context, self, "ParentTable", False, False))
        return self._parentTable
    @property
    def parentTableCell(self) -> 'TableCell':
        if self._parentTableCell is None:
            self._parentTableCell = TableCell(self.context, _createPropertyObjectPath(self.context, self, "ParentTableCell", False, False))
        return self._parentTableCell
    @property
    def tables(self) -> 'TableCollection':
        if self._tables is None:
            self._tables = TableCollection(self.context, _createPropertyObjectPath(self.context, self, "Tables", True, False))
        return self._tables

    @property
    def hyperlink(self) -> 'str':
        _throwIfNotLoaded("hyperlink", self._hyperlink)
        return self._hyperlink
    

    @hyperlink.setter
    def hyperlink(self, value : 'str'):
        self._hyperlink = value
        _createSetPropertyAction(self.context, self, "Hyperlink", value)
    

    @property
    def isEmpty(self) -> 'bool':
        _throwIfNotLoaded("isEmpty", self._isEmpty)
        return self._isEmpty
    

    @property
    def style(self) -> 'str':
        _throwIfNotLoaded("style", self._style)
        return self._style
    

    @style.setter
    def style(self, value : 'str'):
        self._style = value
        _createSetPropertyAction(self.context, self, "Style", value)
    

    @property
    def styleBuiltIn(self) -> 'str':
        _throwIfNotLoaded("styleBuiltIn", self._styleBuiltIn)
        return self._styleBuiltIn
    

    @styleBuiltIn.setter
    def styleBuiltIn(self, value : 'str'):
        self._styleBuiltIn = value
        _createSetPropertyAction(self.context, self, "StyleBuiltIn", value)
    

    @property
    def text(self) -> 'str':
        _throwIfNotLoaded("text", self._text)
        return self._text
    

    @property
    def _Id(self) -> 'int':
        _throwIfNotLoaded("_Id", self.__Id)
        return self.__Id
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def clear(self) -> None:
    	# Begin_PlaceHolder_Range_Clear
    	# End_PlaceHolder_Range_Clear
        _createMethodAction(self.context, self, "Clear", OfficeExtension.OperationType.Default, [])

    def compareLocationWith(self, range : 'Range') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Range_CompareLocationWith
        # End_PlaceHolder_Range_CompareLocationWith
        action = _createMethodAction(self.context, self, "CompareLocationWith", OfficeExtension.OperationType.Read, [range])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        return ret

    def delete(self) -> None:
    	# Begin_PlaceHolder_Range_Delete
    	# End_PlaceHolder_Range_Delete
        _createMethodAction(self.context, self, "Delete", OfficeExtension.OperationType.Default, [])

    def expandTo(self, range : 'Range') -> 'Range':
    	# Begin_PlaceHolder_Range_ExpandTo
    	# End_PlaceHolder_Range_ExpandTo
        return Range(self.context, _createMethodObjectPath(self.context, self, "ExpandTo", OfficeExtension.OperationType.Default, [range], False, False))

    def getHtml(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Range_GetHtml
        # End_PlaceHolder_Range_GetHtml
        action = _createMethodAction(self.context, self, "GetHtml", OfficeExtension.OperationType.Read, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        return ret

    def getHyperlinkRanges(self) -> 'RangeCollection':
    	# Begin_PlaceHolder_Range_GetHyperlinkRanges
    	# End_PlaceHolder_Range_GetHyperlinkRanges
        return RangeCollection(self.context, _createMethodObjectPath(self.context, self, "GetHyperlinkRanges", OfficeExtension.OperationType.Read, [], True, False))

    def getNextTextRange(self, endingMarks : 'list', trimSpacing : 'bool' = None) -> 'Range':
    	# Begin_PlaceHolder_Range_GetNextTextRange
    	# End_PlaceHolder_Range_GetNextTextRange
        return Range(self.context, _createMethodObjectPath(self.context, self, "GetNextTextRange", OfficeExtension.OperationType.Read, [endingMarks, trimSpacing], False, False))

    def getOoxml(self) -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Range_GetOoxml
        # End_PlaceHolder_Range_GetOoxml
        action = _createMethodAction(self.context, self, "GetOoxml", OfficeExtension.OperationType.Read, [])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        return ret

    def getRange(self, rangeLocation : 'str' = None) -> 'Range':
    	# Begin_PlaceHolder_Range_GetRange
    	# End_PlaceHolder_Range_GetRange
        return Range(self.context, _createMethodObjectPath(self.context, self, "GetRange", OfficeExtension.OperationType.Read, [rangeLocation], False, False))

    def getTextRanges(self, endingMarks : 'list', trimSpacing : 'bool' = None) -> 'RangeCollection':
    	# Begin_PlaceHolder_Range_GetTextRanges
    	# End_PlaceHolder_Range_GetTextRanges
        return RangeCollection(self.context, _createMethodObjectPath(self.context, self, "GetTextRanges", OfficeExtension.OperationType.Read, [endingMarks, trimSpacing], True, False))

    def insertBreak(self, breakType : 'str', insertLocation : 'str') -> None:
    	# Begin_PlaceHolder_Range_InsertBreak
    	# End_PlaceHolder_Range_InsertBreak
        _createMethodAction(self.context, self, "InsertBreak", OfficeExtension.OperationType.Default, [breakType, insertLocation])

    def insertContentControl(self) -> 'ContentControl':
    	# Begin_PlaceHolder_Range_InsertContentControl
    	# End_PlaceHolder_Range_InsertContentControl
        return ContentControl(self.context, _createMethodObjectPath(self.context, self, "InsertContentControl", OfficeExtension.OperationType.Default, [], False, True))

    def insertFileFromBase64(self, base64File : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_Range_InsertFileFromBase64
    	# End_PlaceHolder_Range_InsertFileFromBase64
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertFileFromBase64", OfficeExtension.OperationType.Default, [base64File, insertLocation], False, True))

    def insertHtml(self, html : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_Range_InsertHtml
    	# End_PlaceHolder_Range_InsertHtml
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertHtml", OfficeExtension.OperationType.Default, [html, insertLocation], False, True))

    def insertInlinePictureFromBase64(self, base64EncodedImage : 'str', insertLocation : 'str') -> 'InlinePicture':
    	# Begin_PlaceHolder_Range_InsertInlinePictureFromBase64
    	# End_PlaceHolder_Range_InsertInlinePictureFromBase64
        return InlinePicture(self.context, _createMethodObjectPath(self.context, self, "InsertInlinePictureFromBase64", OfficeExtension.OperationType.Default, [base64EncodedImage, insertLocation], False, True))

    def insertOoxml(self, ooxml : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_Range_InsertOoxml
    	# End_PlaceHolder_Range_InsertOoxml
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertOoxml", OfficeExtension.OperationType.Default, [ooxml, insertLocation], False, True))

    def insertParagraph(self, paragraphText : 'str', insertLocation : 'str') -> 'Paragraph':
    	# Begin_PlaceHolder_Range_InsertParagraph
    	# End_PlaceHolder_Range_InsertParagraph
        return Paragraph(self.context, _createMethodObjectPath(self.context, self, "InsertParagraph", OfficeExtension.OperationType.Default, [paragraphText, insertLocation], False, True))

    def insertTable(self, rowCount : 'int', columnCount : 'int', insertLocation : 'str', values : 'list' = None) -> 'Table':
    	# Begin_PlaceHolder_Range_InsertTable
    	# End_PlaceHolder_Range_InsertTable
        return Table(self.context, _createMethodObjectPath(self.context, self, "InsertTable", OfficeExtension.OperationType.Default, [rowCount, columnCount, insertLocation, values], False, True))

    def insertText(self, text : 'str', insertLocation : 'str') -> 'Range':
    	# Begin_PlaceHolder_Range_InsertText
    	# End_PlaceHolder_Range_InsertText
        return Range(self.context, _createMethodObjectPath(self.context, self, "InsertText", OfficeExtension.OperationType.Default, [text, insertLocation], False, True))

    def intersectWith(self, range : 'Range') -> 'Range':
    	# Begin_PlaceHolder_Range_IntersectWith
    	# End_PlaceHolder_Range_IntersectWith
        return Range(self.context, _createMethodObjectPath(self.context, self, "IntersectWith", OfficeExtension.OperationType.Default, [range], False, False))

    def search(self, searchText : 'str', searchOptions : 'SearchOptions' = None) -> 'RangeCollection':
    	# Begin_PlaceHolder_Range_Search
    	# End_PlaceHolder_Range_Search
        return RangeCollection(self.context, _createMethodObjectPath(self.context, self, "Search", OfficeExtension.OperationType.Read, [searchText, searchOptions], True, True))

    def select(self, selectionMode : 'str' = None) -> None:
    	# Begin_PlaceHolder_Range_Select
    	# End_PlaceHolder_Range_Select
        _createMethodAction(self.context, self, "Select", OfficeExtension.OperationType.Read, [selectionMode])

    def split(self, delimiters : 'list', multiParagraphs : 'bool' = None, trimDelimiters : 'bool' = None, trimSpacing : 'bool' = None) -> 'RangeCollection':
    	# Begin_PlaceHolder_Range_Split
    	# End_PlaceHolder_Range_Split
        return RangeCollection(self.context, _createMethodObjectPath(self.context, self, "Split", OfficeExtension.OperationType.Read, [delimiters, multiParagraphs, trimDelimiters, trimSpacing], True, False))

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_Range__KeepReference
    	# End_PlaceHolder_Range__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("Hyperlink")):
            self._hyperlink = obj.get("Hyperlink")
        if not _isUndefined(obj.get("IsEmpty")):
            self._isEmpty = obj.get("IsEmpty")
        if not _isUndefined(obj.get("Style")):
            self._style = obj.get("Style")
        if not _isUndefined(obj.get("StyleBuiltIn")):
            self._styleBuiltIn = obj.get("StyleBuiltIn")
        if not _isUndefined(obj.get("Text")):
            self._text = obj.get("Text")
        if not _isUndefined(obj.get("_Id")):
            self.__Id = obj.get("_Id")
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isUndefined(obj.get("ContentControls")):
            self.contentControls._handleResult(obj.get("ContentControls"))
        if not _isUndefined(obj.get("Font")):
            self.font._handleResult(obj.get("Font"))
        if not _isUndefined(obj.get("InlinePictures")):
            self.inlinePictures._handleResult(obj.get("InlinePictures"))
        if not _isUndefined(obj.get("Lists")):
            self.lists._handleResult(obj.get("Lists"))
        if not _isUndefined(obj.get("Paragraphs")):
            self.paragraphs._handleResult(obj.get("Paragraphs"))
        if not _isUndefined(obj.get("ParentBody")):
            self.parentBody._handleResult(obj.get("ParentBody"))
        if not _isUndefined(obj.get("ParentContentControl")):
            self.parentContentControl._handleResult(obj.get("ParentContentControl"))
        if not _isUndefined(obj.get("ParentTable")):
            self.parentTable._handleResult(obj.get("ParentTable"))
        if not _isUndefined(obj.get("ParentTableCell")):
            self.parentTableCell._handleResult(obj.get("ParentTableCell"))
        if not _isUndefined(obj.get("Tables")):
            self.tables._handleResult(obj.get("Tables"))
    
    def load(self, option = None) -> 'Range':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class RangeCollection(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_RangeCollection_Custom_Members
    # End_PlaceHolder_RangeCollection_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self.__ReferenceId = None
        self.__items = None

    
    @property
    def items(self) -> 'list of Range':
        _throwIfNotLoaded("items", self.__items)
        return self.__items
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def getFirst(self) -> 'Range':
    	# Begin_PlaceHolder_RangeCollection_GetFirst
    	# End_PlaceHolder_RangeCollection_GetFirst
        return Range(self.context, _createMethodObjectPath(self.context, self, "GetFirst", OfficeExtension.OperationType.Read, [], False, False))

    def _GetItem(self, index : 'any') -> 'Range':
    	# Begin_PlaceHolder_RangeCollection__GetItem
    	# End_PlaceHolder_RangeCollection__GetItem
        return Range(self.context, _createIndexerObjectPath(self.context, self, [index]))

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_RangeCollection__KeepReference
    	# End_PlaceHolder_RangeCollection__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isNullOrUndefined(obj.get(OfficeExtension.Constants.items)):
            self.__items = []
            data = obj.get(OfficeExtension.Constants.items)
            for i, itemData in enumerate(data):
                item = Range(self.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(True, self.context, self, itemData, i))
                item._handleResult(itemData)
                self.__items.append(item)
    
    def load(self, option = None) -> 'RangeCollection':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class SearchOptions(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_SearchOptions_Custom_Members
    # End_PlaceHolder_SearchOptions_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._ignorePunct = None
        self._ignoreSpace = None
        self._matchCase = None
        self._matchPrefix = None
        self._matchSuffix = None
        self._matchWholeWord = None
        self._matchWildcards = None


    @property
    def ignorePunct(self) -> 'bool':
        _throwIfNotLoaded("ignorePunct", self._ignorePunct)
        return self._ignorePunct
    

    @ignorePunct.setter
    def ignorePunct(self, value : 'bool'):
        self._ignorePunct = value
        _createSetPropertyAction(self.context, self, "IgnorePunct", value)
    

    @property
    def ignoreSpace(self) -> 'bool':
        _throwIfNotLoaded("ignoreSpace", self._ignoreSpace)
        return self._ignoreSpace
    

    @ignoreSpace.setter
    def ignoreSpace(self, value : 'bool'):
        self._ignoreSpace = value
        _createSetPropertyAction(self.context, self, "IgnoreSpace", value)
    

    @property
    def matchCase(self) -> 'bool':
        _throwIfNotLoaded("matchCase", self._matchCase)
        return self._matchCase
    

    @matchCase.setter
    def matchCase(self, value : 'bool'):
        self._matchCase = value
        _createSetPropertyAction(self.context, self, "MatchCase", value)
    

    @property
    def matchPrefix(self) -> 'bool':
        _throwIfNotLoaded("matchPrefix", self._matchPrefix)
        return self._matchPrefix
    

    @matchPrefix.setter
    def matchPrefix(self, value : 'bool'):
        self._matchPrefix = value
        _createSetPropertyAction(self.context, self, "MatchPrefix", value)
    

    @property
    def matchSuffix(self) -> 'bool':
        _throwIfNotLoaded("matchSuffix", self._matchSuffix)
        return self._matchSuffix
    

    @matchSuffix.setter
    def matchSuffix(self, value : 'bool'):
        self._matchSuffix = value
        _createSetPropertyAction(self.context, self, "MatchSuffix", value)
    

    @property
    def matchWholeWord(self) -> 'bool':
        _throwIfNotLoaded("matchWholeWord", self._matchWholeWord)
        return self._matchWholeWord
    

    @matchWholeWord.setter
    def matchWholeWord(self, value : 'bool'):
        self._matchWholeWord = value
        _createSetPropertyAction(self.context, self, "MatchWholeWord", value)
    

    @property
    def matchWildcards(self) -> 'bool':
        _throwIfNotLoaded("matchWildcards", self._matchWildcards)
        return self._matchWildcards
    

    @matchWildcards.setter
    def matchWildcards(self, value : 'bool'):
        self._matchWildcards = value
        _createSetPropertyAction(self.context, self, "MatchWildcards", value)
    

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("IgnorePunct")):
            self._ignorePunct = obj.get("IgnorePunct")
        if not _isUndefined(obj.get("IgnoreSpace")):
            self._ignoreSpace = obj.get("IgnoreSpace")
        if not _isUndefined(obj.get("MatchCase")):
            self._matchCase = obj.get("MatchCase")
        if not _isUndefined(obj.get("MatchPrefix")):
            self._matchPrefix = obj.get("MatchPrefix")
        if not _isUndefined(obj.get("MatchSuffix")):
            self._matchSuffix = obj.get("MatchSuffix")
        if not _isUndefined(obj.get("MatchWholeWord")):
            self._matchWholeWord = obj.get("MatchWholeWord")
        if not _isUndefined(obj.get("MatchWildcards")):
            self._matchWildcards = obj.get("MatchWildcards")
    
    def load(self, option = None) -> 'SearchOptions':
        _load(self, option);

    @staticmethod
    def newObject(context: OfficeExtension.ClientRequestContext) -> 'SearchOptions':
        ret = SearchOptions(context, _createNewObjectObjectPath(context, "Microsoft.WordServices.SearchOptions", False))
        return ret
    

class Section(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_Section_Custom_Members
    # End_PlaceHolder_Section_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._body = None
        self.__Id = None
        self.__ReferenceId = None

    @property
    def body(self) -> 'Body':
        if self._body is None:
            self._body = Body(self.context, _createPropertyObjectPath(self.context, self, "Body", False, False))
        return self._body

    @property
    def _Id(self) -> 'int':
        _throwIfNotLoaded("_Id", self.__Id)
        return self.__Id
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def getFooter(self, type : 'str') -> 'Body':
    	# Begin_PlaceHolder_Section_GetFooter
    	# End_PlaceHolder_Section_GetFooter
        return Body(self.context, _createMethodObjectPath(self.context, self, "GetFooter", OfficeExtension.OperationType.Read, [type], False, True))

    def getHeader(self, type : 'str') -> 'Body':
    	# Begin_PlaceHolder_Section_GetHeader
    	# End_PlaceHolder_Section_GetHeader
        return Body(self.context, _createMethodObjectPath(self.context, self, "GetHeader", OfficeExtension.OperationType.Read, [type], False, True))

    def getNext(self) -> 'Section':
    	# Begin_PlaceHolder_Section_GetNext
    	# End_PlaceHolder_Section_GetNext
        return Section(self.context, _createMethodObjectPath(self.context, self, "GetNext", OfficeExtension.OperationType.Read, [], False, False))

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_Section__KeepReference
    	# End_PlaceHolder_Section__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("_Id")):
            self.__Id = obj.get("_Id")
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isUndefined(obj.get("Body")):
            self.body._handleResult(obj.get("Body"))
    
    def load(self, option = None) -> 'Section':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class SectionCollection(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_SectionCollection_Custom_Members
    # End_PlaceHolder_SectionCollection_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self.__ReferenceId = None
        self.__items = None

    
    @property
    def items(self) -> 'list of Section':
        _throwIfNotLoaded("items", self.__items)
        return self.__items
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def getFirst(self) -> 'Section':
    	# Begin_PlaceHolder_SectionCollection_GetFirst
    	# End_PlaceHolder_SectionCollection_GetFirst
        return Section(self.context, _createMethodObjectPath(self.context, self, "GetFirst", OfficeExtension.OperationType.Read, [], False, False))

    def _GetItem(self, index : 'any') -> 'Section':
    	# Begin_PlaceHolder_SectionCollection__GetItem
    	# End_PlaceHolder_SectionCollection__GetItem
        return Section(self.context, _createIndexerObjectPath(self.context, self, [index]))

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_SectionCollection__KeepReference
    	# End_PlaceHolder_SectionCollection__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isNullOrUndefined(obj.get(OfficeExtension.Constants.items)):
            self.__items = []
            data = obj.get(OfficeExtension.Constants.items)
            for i, itemData in enumerate(data):
                item = Section(self.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(True, self.context, self, itemData, i))
                item._handleResult(itemData)
                self.__items.append(item)
    
    def load(self, option = None) -> 'SectionCollection':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class Table(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_Table_Custom_Members
    # End_PlaceHolder_Table_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._font = None
        self._headerRowCount = None
        self._height = None
        self._horizontalAlignment = None
        self._isUniform = None
        self._nestingLevel = None
        self._paragraphAfter = None
        self._paragraphBefore = None
        self._parentBody = None
        self._parentContentControl = None
        self._parentTable = None
        self._parentTableCell = None
        self._rowCount = None
        self._rows = None
        self._shadingColor = None
        self._style = None
        self._styleBandedColumns = None
        self._styleBandedRows = None
        self._styleBuiltIn = None
        self._styleFirstColumn = None
        self._styleLastColumn = None
        self._styleTotalRow = None
        self._tables = None
        self._values = None
        self._verticalAlignment = None
        self._width = None
        self.__Id = None
        self.__ReferenceId = None

    @property
    def font(self) -> 'Font':
        if self._font is None:
            self._font = Font(self.context, _createPropertyObjectPath(self.context, self, "Font", False, False))
        return self._font
    @property
    def paragraphAfter(self) -> 'Paragraph':
        if self._paragraphAfter is None:
            self._paragraphAfter = Paragraph(self.context, _createPropertyObjectPath(self.context, self, "ParagraphAfter", False, False))
        return self._paragraphAfter
    @property
    def paragraphBefore(self) -> 'Paragraph':
        if self._paragraphBefore is None:
            self._paragraphBefore = Paragraph(self.context, _createPropertyObjectPath(self.context, self, "ParagraphBefore", False, False))
        return self._paragraphBefore
    @property
    def parentBody(self) -> 'Body':
        if self._parentBody is None:
            self._parentBody = Body(self.context, _createPropertyObjectPath(self.context, self, "ParentBody", False, False))
        return self._parentBody
    @property
    def parentContentControl(self) -> 'ContentControl':
        if self._parentContentControl is None:
            self._parentContentControl = ContentControl(self.context, _createPropertyObjectPath(self.context, self, "ParentContentControl", False, False))
        return self._parentContentControl
    @property
    def parentTable(self) -> 'Table':
        if self._parentTable is None:
            self._parentTable = Table(self.context, _createPropertyObjectPath(self.context, self, "ParentTable", False, False))
        return self._parentTable
    @property
    def parentTableCell(self) -> 'TableCell':
        if self._parentTableCell is None:
            self._parentTableCell = TableCell(self.context, _createPropertyObjectPath(self.context, self, "ParentTableCell", False, False))
        return self._parentTableCell
    @property
    def rows(self) -> 'TableRowCollection':
        if self._rows is None:
            self._rows = TableRowCollection(self.context, _createPropertyObjectPath(self.context, self, "Rows", True, False))
        return self._rows
    @property
    def tables(self) -> 'TableCollection':
        if self._tables is None:
            self._tables = TableCollection(self.context, _createPropertyObjectPath(self.context, self, "Tables", True, False))
        return self._tables

    @property
    def headerRowCount(self) -> 'int':
        _throwIfNotLoaded("headerRowCount", self._headerRowCount)
        return self._headerRowCount
    

    @headerRowCount.setter
    def headerRowCount(self, value : 'int'):
        self._headerRowCount = value
        _createSetPropertyAction(self.context, self, "HeaderRowCount", value)
    

    @property
    def height(self) -> 'float':
        _throwIfNotLoaded("height", self._height)
        return self._height
    

    @property
    def horizontalAlignment(self) -> 'str':
        _throwIfNotLoaded("horizontalAlignment", self._horizontalAlignment)
        return self._horizontalAlignment
    

    @horizontalAlignment.setter
    def horizontalAlignment(self, value : 'str'):
        self._horizontalAlignment = value
        _createSetPropertyAction(self.context, self, "HorizontalAlignment", value)
    

    @property
    def isUniform(self) -> 'bool':
        _throwIfNotLoaded("isUniform", self._isUniform)
        return self._isUniform
    

    @property
    def nestingLevel(self) -> 'int':
        _throwIfNotLoaded("nestingLevel", self._nestingLevel)
        return self._nestingLevel
    

    @property
    def rowCount(self) -> 'int':
        _throwIfNotLoaded("rowCount", self._rowCount)
        return self._rowCount
    

    @property
    def shadingColor(self) -> 'str':
        _throwIfNotLoaded("shadingColor", self._shadingColor)
        return self._shadingColor
    

    @shadingColor.setter
    def shadingColor(self, value : 'str'):
        self._shadingColor = value
        _createSetPropertyAction(self.context, self, "ShadingColor", value)
    

    @property
    def style(self) -> 'str':
        _throwIfNotLoaded("style", self._style)
        return self._style
    

    @style.setter
    def style(self, value : 'str'):
        self._style = value
        _createSetPropertyAction(self.context, self, "Style", value)
    

    @property
    def styleBandedColumns(self) -> 'bool':
        _throwIfNotLoaded("styleBandedColumns", self._styleBandedColumns)
        return self._styleBandedColumns
    

    @styleBandedColumns.setter
    def styleBandedColumns(self, value : 'bool'):
        self._styleBandedColumns = value
        _createSetPropertyAction(self.context, self, "StyleBandedColumns", value)
    

    @property
    def styleBandedRows(self) -> 'bool':
        _throwIfNotLoaded("styleBandedRows", self._styleBandedRows)
        return self._styleBandedRows
    

    @styleBandedRows.setter
    def styleBandedRows(self, value : 'bool'):
        self._styleBandedRows = value
        _createSetPropertyAction(self.context, self, "StyleBandedRows", value)
    

    @property
    def styleBuiltIn(self) -> 'str':
        _throwIfNotLoaded("styleBuiltIn", self._styleBuiltIn)
        return self._styleBuiltIn
    

    @styleBuiltIn.setter
    def styleBuiltIn(self, value : 'str'):
        self._styleBuiltIn = value
        _createSetPropertyAction(self.context, self, "StyleBuiltIn", value)
    

    @property
    def styleFirstColumn(self) -> 'bool':
        _throwIfNotLoaded("styleFirstColumn", self._styleFirstColumn)
        return self._styleFirstColumn
    

    @styleFirstColumn.setter
    def styleFirstColumn(self, value : 'bool'):
        self._styleFirstColumn = value
        _createSetPropertyAction(self.context, self, "StyleFirstColumn", value)
    

    @property
    def styleLastColumn(self) -> 'bool':
        _throwIfNotLoaded("styleLastColumn", self._styleLastColumn)
        return self._styleLastColumn
    

    @styleLastColumn.setter
    def styleLastColumn(self, value : 'bool'):
        self._styleLastColumn = value
        _createSetPropertyAction(self.context, self, "StyleLastColumn", value)
    

    @property
    def styleTotalRow(self) -> 'bool':
        _throwIfNotLoaded("styleTotalRow", self._styleTotalRow)
        return self._styleTotalRow
    

    @styleTotalRow.setter
    def styleTotalRow(self, value : 'bool'):
        self._styleTotalRow = value
        _createSetPropertyAction(self.context, self, "StyleTotalRow", value)
    

    @property
    def values(self) -> 'list':
        _throwIfNotLoaded("values", self._values)
        return self._values
    

    @values.setter
    def values(self, value : 'list'):
        self._values = value
        _createSetPropertyAction(self.context, self, "Values", value)
    

    @property
    def verticalAlignment(self) -> 'str':
        _throwIfNotLoaded("verticalAlignment", self._verticalAlignment)
        return self._verticalAlignment
    

    @verticalAlignment.setter
    def verticalAlignment(self, value : 'str'):
        self._verticalAlignment = value
        _createSetPropertyAction(self.context, self, "VerticalAlignment", value)
    

    @property
    def width(self) -> 'float':
        _throwIfNotLoaded("width", self._width)
        return self._width
    

    @width.setter
    def width(self, value : 'float'):
        self._width = value
        _createSetPropertyAction(self.context, self, "Width", value)
    

    @property
    def _Id(self) -> 'int':
        _throwIfNotLoaded("_Id", self.__Id)
        return self.__Id
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def addColumns(self, insertLocation : 'str', columnCount : 'int', values : 'list' = None) -> None:
    	# Begin_PlaceHolder_Table_AddColumns
    	# End_PlaceHolder_Table_AddColumns
        _createMethodAction(self.context, self, "AddColumns", OfficeExtension.OperationType.Default, [insertLocation, columnCount, values])

    def addRows(self, insertLocation : 'str', rowCount : 'int', values : 'list' = None) -> 'TableRowCollection':
    	# Begin_PlaceHolder_Table_AddRows
    	# End_PlaceHolder_Table_AddRows
        return TableRowCollection(self.context, _createMethodObjectPath(self.context, self, "AddRows", OfficeExtension.OperationType.Default, [insertLocation, rowCount, values], True, False))

    def autoFitContents(self) -> None:
    	# Begin_PlaceHolder_Table_AutoFitContents
    	# End_PlaceHolder_Table_AutoFitContents
        _createMethodAction(self.context, self, "AutoFitContents", OfficeExtension.OperationType.Default, [])

    def autoFitWindow(self) -> None:
    	# Begin_PlaceHolder_Table_AutoFitWindow
    	# End_PlaceHolder_Table_AutoFitWindow
        _createMethodAction(self.context, self, "AutoFitWindow", OfficeExtension.OperationType.Default, [])

    def clear(self) -> None:
    	# Begin_PlaceHolder_Table_Clear
    	# End_PlaceHolder_Table_Clear
        _createMethodAction(self.context, self, "Clear", OfficeExtension.OperationType.Default, [])

    def delete(self) -> None:
    	# Begin_PlaceHolder_Table_Delete
    	# End_PlaceHolder_Table_Delete
        _createMethodAction(self.context, self, "Delete", OfficeExtension.OperationType.Default, [])

    def deleteColumns(self, columnIndex : 'int', columnCount : 'int' = None) -> None:
    	# Begin_PlaceHolder_Table_DeleteColumns
    	# End_PlaceHolder_Table_DeleteColumns
        _createMethodAction(self.context, self, "DeleteColumns", OfficeExtension.OperationType.Default, [columnIndex, columnCount])

    def deleteRows(self, rowIndex : 'int', rowCount : 'int' = None) -> None:
    	# Begin_PlaceHolder_Table_DeleteRows
    	# End_PlaceHolder_Table_DeleteRows
        _createMethodAction(self.context, self, "DeleteRows", OfficeExtension.OperationType.Default, [rowIndex, rowCount])

    def distributeColumns(self) -> None:
    	# Begin_PlaceHolder_Table_DistributeColumns
    	# End_PlaceHolder_Table_DistributeColumns
        _createMethodAction(self.context, self, "DistributeColumns", OfficeExtension.OperationType.Default, [])

    def distributeRows(self) -> None:
    	# Begin_PlaceHolder_Table_DistributeRows
    	# End_PlaceHolder_Table_DistributeRows
        _createMethodAction(self.context, self, "DistributeRows", OfficeExtension.OperationType.Default, [])

    def getBorder(self, borderLocation : 'str') -> 'TableBorder':
    	# Begin_PlaceHolder_Table_GetBorder
    	# End_PlaceHolder_Table_GetBorder
        return TableBorder(self.context, _createMethodObjectPath(self.context, self, "GetBorder", OfficeExtension.OperationType.Read, [borderLocation], False, False))

    def getCell(self, rowIndex : 'int', cellIndex : 'int') -> 'TableCell':
    	# Begin_PlaceHolder_Table_GetCell
    	# End_PlaceHolder_Table_GetCell
        return TableCell(self.context, _createMethodObjectPath(self.context, self, "GetCell", OfficeExtension.OperationType.Default, [rowIndex, cellIndex], False, False))

    def getCellPadding(self, cellPaddingLocation : 'str') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_Table_GetCellPadding
        # End_PlaceHolder_Table_GetCellPadding
        action = _createMethodAction(self.context, self, "GetCellPadding", OfficeExtension.OperationType.Read, [cellPaddingLocation])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        return ret

    def getNext(self) -> 'Table':
    	# Begin_PlaceHolder_Table_GetNext
    	# End_PlaceHolder_Table_GetNext
        return Table(self.context, _createMethodObjectPath(self.context, self, "GetNext", OfficeExtension.OperationType.Read, [], False, False))

    def getRange(self, rangeLocation : 'str' = None) -> 'Range':
    	# Begin_PlaceHolder_Table_GetRange
    	# End_PlaceHolder_Table_GetRange
        return Range(self.context, _createMethodObjectPath(self.context, self, "GetRange", OfficeExtension.OperationType.Read, [rangeLocation], False, False))

    def insertContentControl(self) -> 'ContentControl':
    	# Begin_PlaceHolder_Table_InsertContentControl
    	# End_PlaceHolder_Table_InsertContentControl
        return ContentControl(self.context, _createMethodObjectPath(self.context, self, "InsertContentControl", OfficeExtension.OperationType.Default, [], False, True))

    def insertParagraph(self, paragraphText : 'str', insertLocation : 'str') -> 'Paragraph':
    	# Begin_PlaceHolder_Table_InsertParagraph
    	# End_PlaceHolder_Table_InsertParagraph
        return Paragraph(self.context, _createMethodObjectPath(self.context, self, "InsertParagraph", OfficeExtension.OperationType.Default, [paragraphText, insertLocation], False, True))

    def insertTable(self, rowCount : 'int', columnCount : 'int', insertLocation : 'str', values : 'list' = None) -> 'Table':
    	# Begin_PlaceHolder_Table_InsertTable
    	# End_PlaceHolder_Table_InsertTable
        return Table(self.context, _createMethodObjectPath(self.context, self, "InsertTable", OfficeExtension.OperationType.Default, [rowCount, columnCount, insertLocation, values], False, True))

    def search(self, searchText : 'str', searchOptions : 'SearchOptions' = None) -> 'RangeCollection':
    	# Begin_PlaceHolder_Table_Search
    	# End_PlaceHolder_Table_Search
        return RangeCollection(self.context, _createMethodObjectPath(self.context, self, "Search", OfficeExtension.OperationType.Read, [searchText, searchOptions], True, True))

    def select(self, selectionMode : 'str' = None) -> None:
    	# Begin_PlaceHolder_Table_Select
    	# End_PlaceHolder_Table_Select
        _createMethodAction(self.context, self, "Select", OfficeExtension.OperationType.Read, [selectionMode])

    def setCellPadding(self, cellPaddingLocation : 'str', cellPadding : 'float') -> None:
    	# Begin_PlaceHolder_Table_SetCellPadding
    	# End_PlaceHolder_Table_SetCellPadding
        _createMethodAction(self.context, self, "SetCellPadding", OfficeExtension.OperationType.Default, [cellPaddingLocation, cellPadding])

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_Table__KeepReference
    	# End_PlaceHolder_Table__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("HeaderRowCount")):
            self._headerRowCount = obj.get("HeaderRowCount")
        if not _isUndefined(obj.get("Height")):
            self._height = obj.get("Height")
        if not _isUndefined(obj.get("HorizontalAlignment")):
            self._horizontalAlignment = obj.get("HorizontalAlignment")
        if not _isUndefined(obj.get("IsUniform")):
            self._isUniform = obj.get("IsUniform")
        if not _isUndefined(obj.get("NestingLevel")):
            self._nestingLevel = obj.get("NestingLevel")
        if not _isUndefined(obj.get("RowCount")):
            self._rowCount = obj.get("RowCount")
        if not _isUndefined(obj.get("ShadingColor")):
            self._shadingColor = obj.get("ShadingColor")
        if not _isUndefined(obj.get("Style")):
            self._style = obj.get("Style")
        if not _isUndefined(obj.get("StyleBandedColumns")):
            self._styleBandedColumns = obj.get("StyleBandedColumns")
        if not _isUndefined(obj.get("StyleBandedRows")):
            self._styleBandedRows = obj.get("StyleBandedRows")
        if not _isUndefined(obj.get("StyleBuiltIn")):
            self._styleBuiltIn = obj.get("StyleBuiltIn")
        if not _isUndefined(obj.get("StyleFirstColumn")):
            self._styleFirstColumn = obj.get("StyleFirstColumn")
        if not _isUndefined(obj.get("StyleLastColumn")):
            self._styleLastColumn = obj.get("StyleLastColumn")
        if not _isUndefined(obj.get("StyleTotalRow")):
            self._styleTotalRow = obj.get("StyleTotalRow")
        if not _isUndefined(obj.get("Values")):
            self._values = obj.get("Values")
        if not _isUndefined(obj.get("VerticalAlignment")):
            self._verticalAlignment = obj.get("VerticalAlignment")
        if not _isUndefined(obj.get("Width")):
            self._width = obj.get("Width")
        if not _isUndefined(obj.get("_Id")):
            self.__Id = obj.get("_Id")
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isUndefined(obj.get("Font")):
            self.font._handleResult(obj.get("Font"))
        if not _isUndefined(obj.get("ParagraphAfter")):
            self.paragraphAfter._handleResult(obj.get("ParagraphAfter"))
        if not _isUndefined(obj.get("ParagraphBefore")):
            self.paragraphBefore._handleResult(obj.get("ParagraphBefore"))
        if not _isUndefined(obj.get("ParentBody")):
            self.parentBody._handleResult(obj.get("ParentBody"))
        if not _isUndefined(obj.get("ParentContentControl")):
            self.parentContentControl._handleResult(obj.get("ParentContentControl"))
        if not _isUndefined(obj.get("ParentTable")):
            self.parentTable._handleResult(obj.get("ParentTable"))
        if not _isUndefined(obj.get("ParentTableCell")):
            self.parentTableCell._handleResult(obj.get("ParentTableCell"))
        if not _isUndefined(obj.get("Rows")):
            self.rows._handleResult(obj.get("Rows"))
        if not _isUndefined(obj.get("Tables")):
            self.tables._handleResult(obj.get("Tables"))
    
    def load(self, option = None) -> 'Table':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class TableCollection(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_TableCollection_Custom_Members
    # End_PlaceHolder_TableCollection_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self.__ReferenceId = None
        self.__items = None

    
    @property
    def items(self) -> 'list of Table':
        _throwIfNotLoaded("items", self.__items)
        return self.__items
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def getFirst(self) -> 'Table':
    	# Begin_PlaceHolder_TableCollection_GetFirst
    	# End_PlaceHolder_TableCollection_GetFirst
        return Table(self.context, _createMethodObjectPath(self.context, self, "GetFirst", OfficeExtension.OperationType.Read, [], False, False))

    def _GetItem(self, index : 'any') -> 'Table':
    	# Begin_PlaceHolder_TableCollection__GetItem
    	# End_PlaceHolder_TableCollection__GetItem
        return Table(self.context, _createIndexerObjectPath(self.context, self, [index]))

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_TableCollection__KeepReference
    	# End_PlaceHolder_TableCollection__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isNullOrUndefined(obj.get(OfficeExtension.Constants.items)):
            self.__items = []
            data = obj.get(OfficeExtension.Constants.items)
            for i, itemData in enumerate(data):
                item = Table(self.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(True, self.context, self, itemData, i))
                item._handleResult(itemData)
                self.__items.append(item)
    
    def load(self, option = None) -> 'TableCollection':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class TableRow(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_TableRow_Custom_Members
    # End_PlaceHolder_TableRow_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._cellCount = None
        self._cells = None
        self._font = None
        self._horizontalAlignment = None
        self._isHeader = None
        self._parentTable = None
        self._preferredHeight = None
        self._rowIndex = None
        self._shadingColor = None
        self._values = None
        self._verticalAlignment = None
        self.__Id = None
        self.__ReferenceId = None

    @property
    def cells(self) -> 'TableCellCollection':
        if self._cells is None:
            self._cells = TableCellCollection(self.context, _createPropertyObjectPath(self.context, self, "Cells", True, False))
        return self._cells
    @property
    def font(self) -> 'Font':
        if self._font is None:
            self._font = Font(self.context, _createPropertyObjectPath(self.context, self, "Font", False, False))
        return self._font
    @property
    def parentTable(self) -> 'Table':
        if self._parentTable is None:
            self._parentTable = Table(self.context, _createPropertyObjectPath(self.context, self, "ParentTable", False, False))
        return self._parentTable

    @property
    def cellCount(self) -> 'int':
        _throwIfNotLoaded("cellCount", self._cellCount)
        return self._cellCount
    

    @property
    def horizontalAlignment(self) -> 'str':
        _throwIfNotLoaded("horizontalAlignment", self._horizontalAlignment)
        return self._horizontalAlignment
    

    @horizontalAlignment.setter
    def horizontalAlignment(self, value : 'str'):
        self._horizontalAlignment = value
        _createSetPropertyAction(self.context, self, "HorizontalAlignment", value)
    

    @property
    def isHeader(self) -> 'bool':
        _throwIfNotLoaded("isHeader", self._isHeader)
        return self._isHeader
    

    @property
    def preferredHeight(self) -> 'float':
        _throwIfNotLoaded("preferredHeight", self._preferredHeight)
        return self._preferredHeight
    

    @preferredHeight.setter
    def preferredHeight(self, value : 'float'):
        self._preferredHeight = value
        _createSetPropertyAction(self.context, self, "PreferredHeight", value)
    

    @property
    def rowIndex(self) -> 'int':
        _throwIfNotLoaded("rowIndex", self._rowIndex)
        return self._rowIndex
    

    @property
    def shadingColor(self) -> 'str':
        _throwIfNotLoaded("shadingColor", self._shadingColor)
        return self._shadingColor
    

    @shadingColor.setter
    def shadingColor(self, value : 'str'):
        self._shadingColor = value
        _createSetPropertyAction(self.context, self, "ShadingColor", value)
    

    @property
    def values(self) -> 'list':
        _throwIfNotLoaded("values", self._values)
        return self._values
    

    @values.setter
    def values(self, value : 'list'):
        self._values = value
        _createSetPropertyAction(self.context, self, "Values", value)
    

    @property
    def verticalAlignment(self) -> 'str':
        _throwIfNotLoaded("verticalAlignment", self._verticalAlignment)
        return self._verticalAlignment
    

    @verticalAlignment.setter
    def verticalAlignment(self, value : 'str'):
        self._verticalAlignment = value
        _createSetPropertyAction(self.context, self, "VerticalAlignment", value)
    

    @property
    def _Id(self) -> 'int':
        _throwIfNotLoaded("_Id", self.__Id)
        return self.__Id
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def clear(self) -> None:
    	# Begin_PlaceHolder_TableRow_Clear
    	# End_PlaceHolder_TableRow_Clear
        _createMethodAction(self.context, self, "Clear", OfficeExtension.OperationType.Default, [])

    def delete(self) -> None:
    	# Begin_PlaceHolder_TableRow_Delete
    	# End_PlaceHolder_TableRow_Delete
        _createMethodAction(self.context, self, "Delete", OfficeExtension.OperationType.Default, [])

    def getBorder(self, borderLocation : 'str') -> 'TableBorder':
    	# Begin_PlaceHolder_TableRow_GetBorder
    	# End_PlaceHolder_TableRow_GetBorder
        return TableBorder(self.context, _createMethodObjectPath(self.context, self, "GetBorder", OfficeExtension.OperationType.Read, [borderLocation], False, False))

    def getCellPadding(self, cellPaddingLocation : 'str') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TableRow_GetCellPadding
        # End_PlaceHolder_TableRow_GetCellPadding
        action = _createMethodAction(self.context, self, "GetCellPadding", OfficeExtension.OperationType.Read, [cellPaddingLocation])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        return ret

    def getNext(self) -> 'TableRow':
    	# Begin_PlaceHolder_TableRow_GetNext
    	# End_PlaceHolder_TableRow_GetNext
        return TableRow(self.context, _createMethodObjectPath(self.context, self, "GetNext", OfficeExtension.OperationType.Read, [], False, False))

    def insertRows(self, insertLocation : 'str', rowCount : 'int', values : 'list' = None) -> 'TableRowCollection':
    	# Begin_PlaceHolder_TableRow_InsertRows
    	# End_PlaceHolder_TableRow_InsertRows
        return TableRowCollection(self.context, _createMethodObjectPath(self.context, self, "InsertRows", OfficeExtension.OperationType.Read, [insertLocation, rowCount, values], True, False))

    def search(self, searchText : 'str', searchOptions : 'SearchOptions' = None) -> 'RangeCollection':
    	# Begin_PlaceHolder_TableRow_Search
    	# End_PlaceHolder_TableRow_Search
        return RangeCollection(self.context, _createMethodObjectPath(self.context, self, "Search", OfficeExtension.OperationType.Read, [searchText, searchOptions], True, True))

    def select(self, selectionMode : 'str' = None) -> None:
    	# Begin_PlaceHolder_TableRow_Select
    	# End_PlaceHolder_TableRow_Select
        _createMethodAction(self.context, self, "Select", OfficeExtension.OperationType.Read, [selectionMode])

    def setCellPadding(self, cellPaddingLocation : 'str', cellPadding : 'float') -> None:
    	# Begin_PlaceHolder_TableRow_SetCellPadding
    	# End_PlaceHolder_TableRow_SetCellPadding
        _createMethodAction(self.context, self, "SetCellPadding", OfficeExtension.OperationType.Default, [cellPaddingLocation, cellPadding])

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_TableRow__KeepReference
    	# End_PlaceHolder_TableRow__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("CellCount")):
            self._cellCount = obj.get("CellCount")
        if not _isUndefined(obj.get("HorizontalAlignment")):
            self._horizontalAlignment = obj.get("HorizontalAlignment")
        if not _isUndefined(obj.get("IsHeader")):
            self._isHeader = obj.get("IsHeader")
        if not _isUndefined(obj.get("PreferredHeight")):
            self._preferredHeight = obj.get("PreferredHeight")
        if not _isUndefined(obj.get("RowIndex")):
            self._rowIndex = obj.get("RowIndex")
        if not _isUndefined(obj.get("ShadingColor")):
            self._shadingColor = obj.get("ShadingColor")
        if not _isUndefined(obj.get("Values")):
            self._values = obj.get("Values")
        if not _isUndefined(obj.get("VerticalAlignment")):
            self._verticalAlignment = obj.get("VerticalAlignment")
        if not _isUndefined(obj.get("_Id")):
            self.__Id = obj.get("_Id")
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isUndefined(obj.get("Cells")):
            self.cells._handleResult(obj.get("Cells"))
        if not _isUndefined(obj.get("Font")):
            self.font._handleResult(obj.get("Font"))
        if not _isUndefined(obj.get("ParentTable")):
            self.parentTable._handleResult(obj.get("ParentTable"))
    
    def load(self, option = None) -> 'TableRow':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class TableRowCollection(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_TableRowCollection_Custom_Members
    # End_PlaceHolder_TableRowCollection_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self.__ReferenceId = None
        self.__items = None

    
    @property
    def items(self) -> 'list of TableRow':
        _throwIfNotLoaded("items", self.__items)
        return self.__items
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def getFirst(self) -> 'TableRow':
    	# Begin_PlaceHolder_TableRowCollection_GetFirst
    	# End_PlaceHolder_TableRowCollection_GetFirst
        return TableRow(self.context, _createMethodObjectPath(self.context, self, "GetFirst", OfficeExtension.OperationType.Read, [], False, False))

    def _GetItem(self, index : 'any') -> 'TableRow':
    	# Begin_PlaceHolder_TableRowCollection__GetItem
    	# End_PlaceHolder_TableRowCollection__GetItem
        return TableRow(self.context, _createIndexerObjectPath(self.context, self, [index]))

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_TableRowCollection__KeepReference
    	# End_PlaceHolder_TableRowCollection__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isNullOrUndefined(obj.get(OfficeExtension.Constants.items)):
            self.__items = []
            data = obj.get(OfficeExtension.Constants.items)
            for i, itemData in enumerate(data):
                item = TableRow(self.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(True, self.context, self, itemData, i))
                item._handleResult(itemData)
                self.__items.append(item)
    
    def load(self, option = None) -> 'TableRowCollection':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class TableCell(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_TableCell_Custom_Members
    # End_PlaceHolder_TableCell_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._body = None
        self._cellIndex = None
        self._columnWidth = None
        self._horizontalAlignment = None
        self._parentRow = None
        self._parentTable = None
        self._rowIndex = None
        self._shadingColor = None
        self._value = None
        self._verticalAlignment = None
        self._width = None
        self.__Id = None
        self.__ReferenceId = None

    @property
    def body(self) -> 'Body':
        if self._body is None:
            self._body = Body(self.context, _createPropertyObjectPath(self.context, self, "Body", False, False))
        return self._body
    @property
    def parentRow(self) -> 'TableRow':
        if self._parentRow is None:
            self._parentRow = TableRow(self.context, _createPropertyObjectPath(self.context, self, "ParentRow", False, False))
        return self._parentRow
    @property
    def parentTable(self) -> 'Table':
        if self._parentTable is None:
            self._parentTable = Table(self.context, _createPropertyObjectPath(self.context, self, "ParentTable", False, False))
        return self._parentTable

    @property
    def cellIndex(self) -> 'int':
        _throwIfNotLoaded("cellIndex", self._cellIndex)
        return self._cellIndex
    

    @property
    def columnWidth(self) -> 'float':
        _throwIfNotLoaded("columnWidth", self._columnWidth)
        return self._columnWidth
    

    @columnWidth.setter
    def columnWidth(self, value : 'float'):
        self._columnWidth = value
        _createSetPropertyAction(self.context, self, "ColumnWidth", value)
    

    @property
    def horizontalAlignment(self) -> 'str':
        _throwIfNotLoaded("horizontalAlignment", self._horizontalAlignment)
        return self._horizontalAlignment
    

    @horizontalAlignment.setter
    def horizontalAlignment(self, value : 'str'):
        self._horizontalAlignment = value
        _createSetPropertyAction(self.context, self, "HorizontalAlignment", value)
    

    @property
    def rowIndex(self) -> 'int':
        _throwIfNotLoaded("rowIndex", self._rowIndex)
        return self._rowIndex
    

    @property
    def shadingColor(self) -> 'str':
        _throwIfNotLoaded("shadingColor", self._shadingColor)
        return self._shadingColor
    

    @shadingColor.setter
    def shadingColor(self, value : 'str'):
        self._shadingColor = value
        _createSetPropertyAction(self.context, self, "ShadingColor", value)
    

    @property
    def value(self) -> 'str':
        _throwIfNotLoaded("value", self._value)
        return self._value
    

    @value.setter
    def value(self, value : 'str'):
        self._value = value
        _createSetPropertyAction(self.context, self, "Value", value)
    

    @property
    def verticalAlignment(self) -> 'str':
        _throwIfNotLoaded("verticalAlignment", self._verticalAlignment)
        return self._verticalAlignment
    

    @verticalAlignment.setter
    def verticalAlignment(self, value : 'str'):
        self._verticalAlignment = value
        _createSetPropertyAction(self.context, self, "VerticalAlignment", value)
    

    @property
    def width(self) -> 'float':
        _throwIfNotLoaded("width", self._width)
        return self._width
    

    @property
    def _Id(self) -> 'int':
        _throwIfNotLoaded("_Id", self.__Id)
        return self.__Id
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def deleteColumn(self) -> None:
    	# Begin_PlaceHolder_TableCell_DeleteColumn
    	# End_PlaceHolder_TableCell_DeleteColumn
        _createMethodAction(self.context, self, "DeleteColumn", OfficeExtension.OperationType.Default, [])

    def deleteRow(self) -> None:
    	# Begin_PlaceHolder_TableCell_DeleteRow
    	# End_PlaceHolder_TableCell_DeleteRow
        _createMethodAction(self.context, self, "DeleteRow", OfficeExtension.OperationType.Default, [])

    def getBorder(self, borderLocation : 'str') -> 'TableBorder':
    	# Begin_PlaceHolder_TableCell_GetBorder
    	# End_PlaceHolder_TableCell_GetBorder
        return TableBorder(self.context, _createMethodObjectPath(self.context, self, "GetBorder", OfficeExtension.OperationType.Read, [borderLocation], False, False))

    def getCellPadding(self, cellPaddingLocation : 'str') -> OfficeExtension.ClientResult:
        # Begin_PlaceHolder_TableCell_GetCellPadding
        # End_PlaceHolder_TableCell_GetCellPadding
        action = _createMethodAction(self.context, self, "GetCellPadding", OfficeExtension.OperationType.Read, [cellPaddingLocation])
        ret = OfficeExtension.ClientResult()
        _addActionResultHandler(self, action, ret)
        return ret

    def getNext(self) -> 'TableCell':
    	# Begin_PlaceHolder_TableCell_GetNext
    	# End_PlaceHolder_TableCell_GetNext
        return TableCell(self.context, _createMethodObjectPath(self.context, self, "GetNext", OfficeExtension.OperationType.Read, [], False, False))

    def insertColumns(self, insertLocation : 'str', columnCount : 'int', values : 'list' = None) -> None:
    	# Begin_PlaceHolder_TableCell_InsertColumns
    	# End_PlaceHolder_TableCell_InsertColumns
        _createMethodAction(self.context, self, "InsertColumns", OfficeExtension.OperationType.Default, [insertLocation, columnCount, values])

    def insertRows(self, insertLocation : 'str', rowCount : 'int', values : 'list' = None) -> 'TableRowCollection':
    	# Begin_PlaceHolder_TableCell_InsertRows
    	# End_PlaceHolder_TableCell_InsertRows
        return TableRowCollection(self.context, _createMethodObjectPath(self.context, self, "InsertRows", OfficeExtension.OperationType.Default, [insertLocation, rowCount, values], True, False))

    def setCellPadding(self, cellPaddingLocation : 'str', cellPadding : 'float') -> None:
    	# Begin_PlaceHolder_TableCell_SetCellPadding
    	# End_PlaceHolder_TableCell_SetCellPadding
        _createMethodAction(self.context, self, "SetCellPadding", OfficeExtension.OperationType.Default, [cellPaddingLocation, cellPadding])

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_TableCell__KeepReference
    	# End_PlaceHolder_TableCell__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("CellIndex")):
            self._cellIndex = obj.get("CellIndex")
        if not _isUndefined(obj.get("ColumnWidth")):
            self._columnWidth = obj.get("ColumnWidth")
        if not _isUndefined(obj.get("HorizontalAlignment")):
            self._horizontalAlignment = obj.get("HorizontalAlignment")
        if not _isUndefined(obj.get("RowIndex")):
            self._rowIndex = obj.get("RowIndex")
        if not _isUndefined(obj.get("ShadingColor")):
            self._shadingColor = obj.get("ShadingColor")
        if not _isUndefined(obj.get("Value")):
            self._value = obj.get("Value")
        if not _isUndefined(obj.get("VerticalAlignment")):
            self._verticalAlignment = obj.get("VerticalAlignment")
        if not _isUndefined(obj.get("Width")):
            self._width = obj.get("Width")
        if not _isUndefined(obj.get("_Id")):
            self.__Id = obj.get("_Id")
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isUndefined(obj.get("Body")):
            self.body._handleResult(obj.get("Body"))
        if not _isUndefined(obj.get("ParentRow")):
            self.parentRow._handleResult(obj.get("ParentRow"))
        if not _isUndefined(obj.get("ParentTable")):
            self.parentTable._handleResult(obj.get("ParentTable"))
    
    def load(self, option = None) -> 'TableCell':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class TableCellCollection(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_TableCellCollection_Custom_Members
    # End_PlaceHolder_TableCellCollection_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self.__ReferenceId = None
        self.__items = None

    
    @property
    def items(self) -> 'list of TableCell':
        _throwIfNotLoaded("items", self.__items)
        return self.__items
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def getFirst(self) -> 'TableCell':
    	# Begin_PlaceHolder_TableCellCollection_GetFirst
    	# End_PlaceHolder_TableCellCollection_GetFirst
        return TableCell(self.context, _createMethodObjectPath(self.context, self, "GetFirst", OfficeExtension.OperationType.Read, [], False, False))

    def _GetItem(self, index : 'any') -> 'TableCell':
    	# Begin_PlaceHolder_TableCellCollection__GetItem
    	# End_PlaceHolder_TableCellCollection__GetItem
        return TableCell(self.context, _createIndexerObjectPath(self.context, self, [index]))

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_TableCellCollection__KeepReference
    	# End_PlaceHolder_TableCellCollection__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
        if not _isNullOrUndefined(obj.get(OfficeExtension.Constants.items)):
            self.__items = []
            data = obj.get(OfficeExtension.Constants.items)
            for i, itemData in enumerate(data):
                item = TableCell(self.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(True, self.context, self, itemData, i))
                item._handleResult(itemData)
                self.__items.append(item)
    
    def load(self, option = None) -> 'TableCellCollection':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class TableBorder(OfficeExtension.ClientObject):
    # Begin_PlaceHolder_TableBorder_Custom_Members
    # End_PlaceHolder_TableBorder_Custom_Members
    def __init__(self, context: OfficeExtension.ClientRequestContext, objectPath: OfficeExtension.ObjectPath):
        super(self.__class__, self).__init__(context, objectPath)
        self._color = None
        self._type = None
        self._width = None
        self.__ReferenceId = None


    @property
    def color(self) -> 'str':
        _throwIfNotLoaded("color", self._color)
        return self._color
    

    @color.setter
    def color(self, value : 'str'):
        self._color = value
        _createSetPropertyAction(self.context, self, "Color", value)
    

    @property
    def type(self) -> 'str':
        _throwIfNotLoaded("type", self._type)
        return self._type
    

    @type.setter
    def type(self, value : 'str'):
        self._type = value
        _createSetPropertyAction(self.context, self, "Type", value)
    

    @property
    def width(self) -> 'float':
        _throwIfNotLoaded("width", self._width)
        return self._width
    

    @width.setter
    def width(self, value : 'float'):
        self._width = value
        _createSetPropertyAction(self.context, self, "Width", value)
    

    @property
    def _ReferenceId(self) -> 'str':
        _throwIfNotLoaded("_ReferenceId", self.__ReferenceId)
        return self.__ReferenceId
    

    def _KeepReference(self) -> None:
    	# Begin_PlaceHolder_TableBorder__KeepReference
    	# End_PlaceHolder_TableBorder__KeepReference
        _createMethodAction(self.context, self, "_KeepReference", OfficeExtension.OperationType.Read, [])

    # Handle results returned from the document
    def _handleResult(self, value: dict) -> None:
        if _isNullOrUndefined(value):
            return
        obj = value;
        _fixObjectPathIfNecessary(self, obj);
        if not _isUndefined(obj.get("Color")):
            self._color = obj.get("Color")
        if not _isUndefined(obj.get("Type")):
            self._type = obj.get("Type")
        if not _isUndefined(obj.get("Width")):
            self._width = obj.get("Width")
        if not _isUndefined(obj.get("_ReferenceId")):
            self.__ReferenceId = obj.get("_ReferenceId")
    
    def load(self, option = None) -> 'TableBorder':
        _load(self, option);
    def _initReferenceId(self, value: str) -> None:
        self.__ReferenceId = value;

class ContentControlType:
    unknown = "Unknown"
    richTextInline = "RichTextInline"
    richTextParagraphs = "RichTextParagraphs"
    richTextTableCell = "RichTextTableCell"
    richTextTableRow = "RichTextTableRow"
    richTextTable = "RichTextTable"
    plainTextInline = "PlainTextInline"
    plainTextParagraph = "PlainTextParagraph"
    picture = "Picture"
    buildingBlockGallery = "BuildingBlockGallery"
    checkBox = "CheckBox"
    comboBox = "ComboBox"
    dropDownList = "DropDownList"
    datePicker = "DatePicker"
    repeatingSection = "RepeatingSection"
    richText = "RichText"
    plainText = "PlainText"

class ContentControlAppearance:
    boundingBox = "BoundingBox"
    tags = "Tags"
    hidden = "Hidden"

class UnderlineType:
    mixed = "Mixed"
    none = "None"
    hidden = "Hidden"
    dotLine = "DotLine"
    single = "Single"
    word = "Word"
    double = "Double"
    thick = "Thick"
    dotted = "Dotted"
    dottedHeavy = "DottedHeavy"
    dashLine = "DashLine"
    dashLineHeavy = "DashLineHeavy"
    dashLineLong = "DashLineLong"
    dashLineLongHeavy = "DashLineLongHeavy"
    dotDashLine = "DotDashLine"
    dotDashLineHeavy = "DotDashLineHeavy"
    twoDotDashLine = "TwoDotDashLine"
    twoDotDashLineHeavy = "TwoDotDashLineHeavy"
    wave = "Wave"
    waveHeavy = "WaveHeavy"
    waveDouble = "WaveDouble"

class BreakType:
    page = "Page"
    next = "Next"
    sectionNext = "SectionNext"
    sectionContinuous = "SectionContinuous"
    sectionEven = "SectionEven"
    sectionOdd = "SectionOdd"
    line = "Line"

class InsertLocation:
    before = "Before"
    after = "After"
    start = "Start"
    end = "End"
    replace = "Replace"

class Alignment:
    mixed = "Mixed"
    unknown = "Unknown"
    left = "Left"
    centered = "Centered"
    right = "Right"
    justified = "Justified"

class HeaderFooterType:
    primary = "Primary"
    firstPage = "FirstPage"
    evenPages = "EvenPages"

class BodyType:
    unknown = "Unknown"
    mainDoc = "MainDoc"
    section = "Section"
    header = "Header"
    footer = "Footer"
    tableCell = "TableCell"

class SelectionMode:
    select = "Select"
    start = "Start"
    end = "End"

class ImageFormat:
    unsupported = "Unsupported"
    undefined = "Undefined"
    bmp = "Bmp"
    jpeg = "Jpeg"
    gif = "Gif"
    tiff = "Tiff"
    png = "Png"
    icon = "Icon"
    exif = "Exif"
    wmf = "Wmf"
    emf = "Emf"
    pict = "Pict"
    pdf = "Pdf"
    svg = "Svg"

class RangeLocation:
    whole = "Whole"
    start = "Start"
    end = "End"
    before = "Before"
    after = "After"
    content = "Content"

class LocationRelation:
    unrelated = "Unrelated"
    equal = "Equal"
    containsStart = "ContainsStart"
    containsEnd = "ContainsEnd"
    contains = "Contains"
    insideStart = "InsideStart"
    insideEnd = "InsideEnd"
    inside = "Inside"
    adjacentBefore = "AdjacentBefore"
    overlapsBefore = "OverlapsBefore"
    before = "Before"
    adjacentAfter = "AdjacentAfter"
    overlapsAfter = "OverlapsAfter"
    after = "After"

class BorderLocation:
    top = "Top"
    left = "Left"
    bottom = "Bottom"
    right = "Right"
    insideHorizontal = "InsideHorizontal"
    insideVertical = "InsideVertical"
    inside = "Inside"
    outside = "Outside"
    all = "All"

class CellPaddingLocation:
    top = "Top"
    left = "Left"
    bottom = "Bottom"
    right = "Right"

class BorderType:
    mixed = "Mixed"
    none = "None"
    single = "Single"
    double = "Double"
    dotted = "Dotted"
    dashed = "Dashed"
    dotDashed = "DotDashed"
    dot2Dashed = "Dot2Dashed"
    triple = "Triple"
    thinThickSmall = "ThinThickSmall"
    thickThinSmall = "ThickThinSmall"
    thinThickThinSmall = "ThinThickThinSmall"
    thinThickMed = "ThinThickMed"
    thickThinMed = "ThickThinMed"
    thinThickThinMed = "ThinThickThinMed"
    thinThickLarge = "ThinThickLarge"
    thickThinLarge = "ThickThinLarge"
    thinThickThinLarge = "ThinThickThinLarge"
    wave = "Wave"
    doubleWave = "DoubleWave"
    dashedSmall = "DashedSmall"
    dashDotStroked = "DashDotStroked"
    threeDEmboss = "ThreeDEmboss"
    threeDEngrave = "ThreeDEngrave"

class VerticalAlignment:
    mixed = "Mixed"
    top = "Top"
    center = "Center"
    bottom = "Bottom"

class ListLevelType:
    bullet = "Bullet"
    number = "Number"
    picture = "Picture"

class ListBullet:
    custom = "Custom"
    solid = "Solid"
    hollow = "Hollow"
    square = "Square"
    diamonds = "Diamonds"
    arrow = "Arrow"
    checkmark = "Checkmark"

class ListNumbering:
    none = "None"
    arabic = "Arabic"
    upperRoman = "UpperRoman"
    lowerRoman = "LowerRoman"
    upperLetter = "UpperLetter"
    lowerLetter = "LowerLetter"

class Style:
    other = "Other"
    normal = "Normal"
    heading1 = "Heading1"
    heading2 = "Heading2"
    heading3 = "Heading3"
    heading4 = "Heading4"
    heading5 = "Heading5"
    heading6 = "Heading6"
    heading7 = "Heading7"
    heading8 = "Heading8"
    heading9 = "Heading9"
    toc1 = "Toc1"
    toc2 = "Toc2"
    toc3 = "Toc3"
    toc4 = "Toc4"
    toc5 = "Toc5"
    toc6 = "Toc6"
    toc7 = "Toc7"
    toc8 = "Toc8"
    toc9 = "Toc9"
    footnoteText = "FootnoteText"
    header = "Header"
    footer = "Footer"
    caption = "Caption"
    footnoteReference = "FootnoteReference"
    endnoteReference = "EndnoteReference"
    endnoteText = "EndnoteText"
    title = "Title"
    subtitle = "Subtitle"
    hyperlink = "Hyperlink"
    strong = "Strong"
    emphasis = "Emphasis"
    noSpacing = "NoSpacing"
    listParagraph = "ListParagraph"
    quote = "Quote"
    intenseQuote = "IntenseQuote"
    subtleEmphasis = "SubtleEmphasis"
    intenseEmphasis = "IntenseEmphasis"
    subtleReference = "SubtleReference"
    intenseReference = "IntenseReference"
    bookTitle = "BookTitle"
    bibliography = "Bibliography"
    tocHeading = "TocHeading"
    tableGrid = "TableGrid"
    plainTable1 = "PlainTable1"
    plainTable2 = "PlainTable2"
    plainTable3 = "PlainTable3"
    plainTable4 = "PlainTable4"
    plainTable5 = "PlainTable5"
    tableGridLight = "TableGridLight"
    gridTable1Light = "GridTable1Light"
    gridTable1Light_Accent1 = "GridTable1Light_Accent1"
    gridTable1Light_Accent2 = "GridTable1Light_Accent2"
    gridTable1Light_Accent3 = "GridTable1Light_Accent3"
    gridTable1Light_Accent4 = "GridTable1Light_Accent4"
    gridTable1Light_Accent5 = "GridTable1Light_Accent5"
    gridTable1Light_Accent6 = "GridTable1Light_Accent6"
    gridTable2 = "GridTable2"
    gridTable2_Accent1 = "GridTable2_Accent1"
    gridTable2_Accent2 = "GridTable2_Accent2"
    gridTable2_Accent3 = "GridTable2_Accent3"
    gridTable2_Accent4 = "GridTable2_Accent4"
    gridTable2_Accent5 = "GridTable2_Accent5"
    gridTable2_Accent6 = "GridTable2_Accent6"
    gridTable3 = "GridTable3"
    gridTable3_Accent1 = "GridTable3_Accent1"
    gridTable3_Accent2 = "GridTable3_Accent2"
    gridTable3_Accent3 = "GridTable3_Accent3"
    gridTable3_Accent4 = "GridTable3_Accent4"
    gridTable3_Accent5 = "GridTable3_Accent5"
    gridTable3_Accent6 = "GridTable3_Accent6"
    gridTable4 = "GridTable4"
    gridTable4_Accent1 = "GridTable4_Accent1"
    gridTable4_Accent2 = "GridTable4_Accent2"
    gridTable4_Accent3 = "GridTable4_Accent3"
    gridTable4_Accent4 = "GridTable4_Accent4"
    gridTable4_Accent5 = "GridTable4_Accent5"
    gridTable4_Accent6 = "GridTable4_Accent6"
    gridTable5Dark = "GridTable5Dark"
    gridTable5Dark_Accent1 = "GridTable5Dark_Accent1"
    gridTable5Dark_Accent2 = "GridTable5Dark_Accent2"
    gridTable5Dark_Accent3 = "GridTable5Dark_Accent3"
    gridTable5Dark_Accent4 = "GridTable5Dark_Accent4"
    gridTable5Dark_Accent5 = "GridTable5Dark_Accent5"
    gridTable5Dark_Accent6 = "GridTable5Dark_Accent6"
    gridTable6Colorful = "GridTable6Colorful"
    gridTable6Colorful_Accent1 = "GridTable6Colorful_Accent1"
    gridTable6Colorful_Accent2 = "GridTable6Colorful_Accent2"
    gridTable6Colorful_Accent3 = "GridTable6Colorful_Accent3"
    gridTable6Colorful_Accent4 = "GridTable6Colorful_Accent4"
    gridTable6Colorful_Accent5 = "GridTable6Colorful_Accent5"
    gridTable6Colorful_Accent6 = "GridTable6Colorful_Accent6"
    gridTable7Colorful = "GridTable7Colorful"
    gridTable7Colorful_Accent1 = "GridTable7Colorful_Accent1"
    gridTable7Colorful_Accent2 = "GridTable7Colorful_Accent2"
    gridTable7Colorful_Accent3 = "GridTable7Colorful_Accent3"
    gridTable7Colorful_Accent4 = "GridTable7Colorful_Accent4"
    gridTable7Colorful_Accent5 = "GridTable7Colorful_Accent5"
    gridTable7Colorful_Accent6 = "GridTable7Colorful_Accent6"
    listTable1Light = "ListTable1Light"
    listTable1Light_Accent1 = "ListTable1Light_Accent1"
    listTable1Light_Accent2 = "ListTable1Light_Accent2"
    listTable1Light_Accent3 = "ListTable1Light_Accent3"
    listTable1Light_Accent4 = "ListTable1Light_Accent4"
    listTable1Light_Accent5 = "ListTable1Light_Accent5"
    listTable1Light_Accent6 = "ListTable1Light_Accent6"
    listTable2 = "ListTable2"
    listTable2_Accent1 = "ListTable2_Accent1"
    listTable2_Accent2 = "ListTable2_Accent2"
    listTable2_Accent3 = "ListTable2_Accent3"
    listTable2_Accent4 = "ListTable2_Accent4"
    listTable2_Accent5 = "ListTable2_Accent5"
    listTable2_Accent6 = "ListTable2_Accent6"
    listTable3 = "ListTable3"
    listTable3_Accent1 = "ListTable3_Accent1"
    listTable3_Accent2 = "ListTable3_Accent2"
    listTable3_Accent3 = "ListTable3_Accent3"
    listTable3_Accent4 = "ListTable3_Accent4"
    listTable3_Accent5 = "ListTable3_Accent5"
    listTable3_Accent6 = "ListTable3_Accent6"
    listTable4 = "ListTable4"
    listTable4_Accent1 = "ListTable4_Accent1"
    listTable4_Accent2 = "ListTable4_Accent2"
    listTable4_Accent3 = "ListTable4_Accent3"
    listTable4_Accent4 = "ListTable4_Accent4"
    listTable4_Accent5 = "ListTable4_Accent5"
    listTable4_Accent6 = "ListTable4_Accent6"
    listTable5Dark = "ListTable5Dark"
    listTable5Dark_Accent1 = "ListTable5Dark_Accent1"
    listTable5Dark_Accent2 = "ListTable5Dark_Accent2"
    listTable5Dark_Accent3 = "ListTable5Dark_Accent3"
    listTable5Dark_Accent4 = "ListTable5Dark_Accent4"
    listTable5Dark_Accent5 = "ListTable5Dark_Accent5"
    listTable5Dark_Accent6 = "ListTable5Dark_Accent6"
    listTable6Colorful = "ListTable6Colorful"
    listTable6Colorful_Accent1 = "ListTable6Colorful_Accent1"
    listTable6Colorful_Accent2 = "ListTable6Colorful_Accent2"
    listTable6Colorful_Accent3 = "ListTable6Colorful_Accent3"
    listTable6Colorful_Accent4 = "ListTable6Colorful_Accent4"
    listTable6Colorful_Accent5 = "ListTable6Colorful_Accent5"
    listTable6Colorful_Accent6 = "ListTable6Colorful_Accent6"
    listTable7Colorful = "ListTable7Colorful"
    listTable7Colorful_Accent1 = "ListTable7Colorful_Accent1"
    listTable7Colorful_Accent2 = "ListTable7Colorful_Accent2"
    listTable7Colorful_Accent3 = "ListTable7Colorful_Accent3"
    listTable7Colorful_Accent4 = "ListTable7Colorful_Accent4"
    listTable7Colorful_Accent5 = "ListTable7Colorful_Accent5"
    listTable7Colorful_Accent6 = "ListTable7Colorful_Accent6"

class DocumentPropertyType:
    string = "String"
    number = "Number"
    date = "Date"
    boolean = "Boolean"

# Begin_PlaceHolder_GlobalFooter
class RequestContext(OfficeExtension.ClientRequestContext):
    def __init__(self, url: str = None):
        super(self.__class__, self).__init__(url)
        objectPath = OfficeExtension.ObjectPathFactory.createGlobalObjectObjectPath(self)
        self._document = Document(self, objectPath);


    @property
    def document(self) -> Document:
        return self._document
# End_PlaceHolder_GlobalFooter

